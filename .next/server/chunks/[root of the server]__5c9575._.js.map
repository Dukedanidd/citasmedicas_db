{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/doctores/%5Bid%5D/apuntes/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mysql from 'mysql2/promise';\n\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'clinica_db',\n};\n\nexport async function GET(_req: Request, context: any) {\n  const { id } = await context.params;\n  if (!id) {\n    return NextResponse.json({ error: 'doctor_id es requerido' }, { status: 400 });\n  }\n  try {\n    const conn = await mysql.createConnection(dbConfig);\n    const [rows] = await conn.execute(\n      'SELECT apunte_id, doctor_id, texto, fecha_hora FROM apuntes WHERE doctor_id = ? ORDER BY fecha_hora DESC',\n      [id]\n    );\n    await conn.end();\n    return NextResponse.json(rows);\n  } catch (err) {\n    return NextResponse.json({ error: 'Error al leer apuntes', details: err.message }, { status: 500 });\n  }\n}\n\nexport async function POST(req: Request, context: any) {\n  const { id } = await context.params;\n  try {\n    const { texto } = await req.json();\n    if (!id || !texto) {\n      return NextResponse.json({ error: 'doctor_id y texto son requeridos' }, { status: 400 });\n    }\n    const conn = await mysql.createConnection(dbConfig);\n    const [result]: any = await conn.execute(\n      'INSERT INTO apuntes (doctor_id, texto) VALUES (?, ?)',\n      [id, texto]\n    );\n    await conn.end();\n    return NextResponse.json({ message: 'Apunte agregado', apunte_id: result.insertId });\n  } catch (err) {\n    return NextResponse.json({ error: 'Error al agregar apunte', details: err.message }, { status: 500 });\n  }\n}\n\nexport async function PUT(req: Request, context: any) {\n  const { id } = await context.params;\n  try {\n    const { apunte_id, texto } = await req.json();\n    if (!apunte_id || !texto) {\n      return NextResponse.json({ error: 'apunte_id y texto son requeridos' }, { status: 400 });\n    }\n    const conn = await mysql.createConnection(dbConfig);\n    await conn.execute(\n      'UPDATE apuntes SET texto = ? WHERE apunte_id = ? AND doctor_id = ?',\n      [texto, apunte_id, id]\n    );\n    await conn.end();\n    return NextResponse.json({ message: 'Apunte actualizado' });\n  } catch (err) {\n    return NextResponse.json({ error: 'Error al actualizar apunte', details: err.message }, { status: 500 });\n  }\n}\n\nexport async function DELETE(req: Request, context: any) {\n  const { id } = await context.params;\n  try {\n    const { apunte_id } = await req.json();\n    if (!apunte_id) {\n      return NextResponse.json({ error: 'apunte_id es requerido' }, { status: 400 });\n    }\n    const conn = await mysql.createConnection(dbConfig);\n    await conn.execute(\n      'DELETE FROM apuntes WHERE apunte_id = ? AND doctor_id = ?',\n      [apunte_id, id]\n    );\n    await conn.end();\n    return NextResponse.json({ message: 'Apunte eliminado' });\n  } catch (err) {\n    return NextResponse.json({ error: 'Error al eliminar apunte', details: err.message }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAEO,eAAe,IAAI,IAAa,EAAE,OAAY;IACnD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,MAAM;IACnC,IAAI,CAAC,IAAI;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9E;IACA,IAAI;QACF,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QAC1C,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAC/B,4GACA;YAAC;SAAG;QAEN,MAAM,KAAK,GAAG;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,KAAK;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAyB,SAAS,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnG;AACF;AAEO,eAAe,KAAK,GAAY,EAAE,OAAY;IACnD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,MAAM;IACnC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAChC,IAAI,CAAC,MAAM,CAAC,OAAO;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmC,GAAG;gBAAE,QAAQ;YAAI;QACxF;QACA,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QAC1C,MAAM,CAAC,OAAO,GAAQ,MAAM,KAAK,OAAO,CACtC,wDACA;YAAC;YAAI;SAAM;QAEb,MAAM,KAAK,GAAG;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAmB,WAAW,OAAO,QAAQ;QAAC;IACpF,EAAE,OAAO,KAAK;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAA2B,SAAS,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrG;AACF;AAEO,eAAe,IAAI,GAAY,EAAE,OAAY;IAClD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,MAAM;IACnC,IAAI;QACF,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAC3C,IAAI,CAAC,aAAa,CAAC,OAAO;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmC,GAAG;gBAAE,QAAQ;YAAI;QACxF;QACA,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QAC1C,MAAM,KAAK,OAAO,CAChB,sEACA;YAAC;YAAO;YAAW;SAAG;QAExB,MAAM,KAAK,GAAG;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAqB;IAC3D,EAAE,OAAO,KAAK;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAA8B,SAAS,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACxG;AACF;AAEO,eAAe,OAAO,GAAY,EAAE,OAAY;IACrD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,MAAM;IACnC,IAAI;QACF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,IAAI;QACpC,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QACA,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QAC1C,MAAM,KAAK,OAAO,CAChB,6DACA;YAAC;YAAW;SAAG;QAEjB,MAAM,KAAK,GAAG;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAmB;IACzD,EAAE,OAAO,KAAK;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAA4B,SAAS,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACtG;AACF"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}