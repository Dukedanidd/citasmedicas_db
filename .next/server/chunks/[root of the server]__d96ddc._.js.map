{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/arman/ISC/citasmedicas_db/app/api/citas/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport mysql from 'mysql2/promise';\r\n\r\n// Configuración de la base de datos\r\nconst dbConfig = {\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || '',\r\n  database: process.env.DB_NAME || 'clinica_db'\r\n};\r\n\r\n// GET - Obtener todas las citas o una cita específica\r\nexport async function GET(request) {\r\n  console.log('[GET /api/citas] Iniciando petición...');\r\n  let conn;\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const citaId = searchParams.get('citaId');\r\n    const pacienteId = searchParams.get('pacienteId');\r\n    const doctorId = searchParams.get('doctorId');\r\n    console.log('[GET /api/citas] Parámetros:', { citaId, pacienteId, doctorId });\r\n\r\n    console.log('[GET /api/citas] Conectando a la base de datos...');\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log('[GET /api/citas] Conexión exitosa');\r\n\r\n    // Asignar current_user_id para los triggers\r\n    await conn.execute('SET @current_user_id = 1');\r\n    console.log('[GET /api/citas] current_user_id asignado');\r\n\r\n    let query = `\r\n      SELECT \r\n        c.*,\r\n        p.primer_nombre as paciente_nombre,\r\n        p.apellido_paterno as paciente_apellido,\r\n        d.primer_nombre as doctor_nombre,\r\n        d.apellido_paterno as doctor_apellido,\r\n        e.nombre as estado_nombre\r\n      FROM citas c\r\n      JOIN usuarios p ON c.paciente_id = p.user_id\r\n      JOIN usuarios d ON c.doctor_id = d.user_id\r\n      JOIN estado_citas e ON c.estado_id = e.estado_id\r\n      WHERE 1=1\r\n    `;\r\n    const params = [];\r\n\r\n    if (citaId) {\r\n      query += ' AND c.cita_id = ?';\r\n      params.push(citaId);\r\n    }\r\n    if (pacienteId) {\r\n      query += ' AND c.paciente_id = ?';\r\n      params.push(pacienteId);\r\n    }\r\n    if (doctorId) {\r\n      query += ' AND c.doctor_id = ?';\r\n      params.push(doctorId);\r\n    }\r\n\r\n    console.log('[GET /api/citas] Ejecutando query:', query);\r\n    const [rows] = await conn.execute(query, params);\r\n    console.log('[GET /api/citas] Resultados:', rows);\r\n\r\n    if (citaId && !rows[0]) {\r\n      return NextResponse.json(\r\n        { error: 'Cita no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(citaId ? rows[0] : rows);\r\n  } catch (error) {\r\n    console.error('[GET /api/citas] Error:', error);\r\n    console.error('[GET /api/citas] Stack trace:', error.stack);\r\n    return NextResponse.json(\r\n      { error: 'Error al obtener citas' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log('[GET /api/citas] Conexión cerrada');\r\n    }\r\n  }\r\n}\r\n\r\n// POST - Crear una nueva cita\r\nexport async function POST(request) {\r\n  console.log('[POST /api/citas] Iniciando petición...');\r\n  let conn;\r\n  try {\r\n    const data = await request.json();\r\n    console.log('[POST /api/citas] Datos recibidos:', data);\r\n\r\n    const {\r\n      paciente_id,\r\n      doctor_id,\r\n      fecha_hora,\r\n      estado_id,\r\n      notas\r\n    } = data;\r\n\r\n    if (!paciente_id || !doctor_id || !fecha_hora || !estado_id) {\r\n      return NextResponse.json(\r\n        { error: 'Faltan campos requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log('[POST /api/citas] Conectando a la base de datos...');\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log('[POST /api/citas] Conexión exitosa');\r\n\r\n    // Iniciar transacción\r\n    await conn.beginTransaction();\r\n    console.log('[POST /api/citas] Transacción iniciada');\r\n\r\n    // Asignar current_user_id para los triggers\r\n    await conn.execute('SET @current_user_id = 1');\r\n    console.log('[POST /api/citas] current_user_id asignado');\r\n\r\n    // Verificar si el paciente existe\r\n    console.log('[POST /api/citas] Verificando paciente...');\r\n    const [paciente] = await conn.execute(\r\n      'SELECT user_id FROM usuarios WHERE user_id = ?',\r\n      [paciente_id]\r\n    );\r\n\r\n    if (!paciente[0]) {\r\n      await conn.rollback();\r\n      console.log('[POST /api/citas] Paciente no encontrado');\r\n      return NextResponse.json(\r\n        { error: 'El paciente especificado no existe' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar si el doctor existe\r\n    console.log('[POST /api/citas] Verificando doctor...');\r\n    const [doctor] = await conn.execute(\r\n      'SELECT user_id FROM usuarios WHERE user_id = ?',\r\n      [doctor_id]\r\n    );\r\n\r\n    if (!doctor[0]) {\r\n      await conn.rollback();\r\n      console.log('[POST /api/citas] Doctor no encontrado');\r\n      return NextResponse.json(\r\n        { error: 'El doctor especificado no existe' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar si el estado existe\r\n    console.log('[POST /api/citas] Verificando estado...');\r\n    const [estado] = await conn.execute(\r\n      'SELECT estado_id FROM estado_citas WHERE estado_id = ?',\r\n      [estado_id]\r\n    );\r\n\r\n    if (!estado[0]) {\r\n      await conn.rollback();\r\n      console.log('[POST /api/citas] Estado no encontrado');\r\n      return NextResponse.json(\r\n        { error: 'El estado especificado no existe' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar disponibilidad del doctor\r\n    console.log('[POST /api/citas] Verificando disponibilidad del doctor...');\r\n    const [citasExistentes] = await conn.execute(`\r\n      SELECT cita_id FROM citas \r\n      WHERE doctor_id = ? \r\n      AND fecha_hora = ?\r\n      AND estado_id != 3\r\n    `, [doctor_id, fecha_hora]);\r\n\r\n    if (citasExistentes.length > 0) {\r\n      await conn.rollback();\r\n      console.log('[POST /api/citas] Doctor no disponible en la fecha/hora especificada');\r\n      return NextResponse.json(\r\n        { error: 'El doctor no está disponible en la fecha y hora especificadas' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Crear la cita\r\n    console.log('[POST /api/citas] Creando cita...');\r\n    const [result] = await conn.execute(`\r\n      INSERT INTO citas (\r\n        paciente_id,\r\n        doctor_id,\r\n        fecha_hora,\r\n        estado_id,\r\n        notas\r\n      ) VALUES (?, ?, ?, ?, ?)\r\n    `, [paciente_id, doctor_id, fecha_hora, estado_id, notas || null]);\r\n\r\n    await conn.commit();\r\n    console.log('[POST /api/citas] Transacción completada');\r\n\r\n    return NextResponse.json({\r\n      message: 'Cita creada exitosamente',\r\n      cita_id: result.insertId\r\n    }, { status: 201 });\r\n  } catch (error) {\r\n    console.error('[POST /api/citas] Error:', error);\r\n    console.error('[POST /api/citas] Stack trace:', error.stack);\r\n    if (conn) {\r\n      await conn.rollback();\r\n      console.log('[POST /api/citas] Transacción revertida');\r\n    }\r\n    return NextResponse.json(\r\n      { error: 'Error al crear cita' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log('[POST /api/citas] Conexión cerrada');\r\n    }\r\n  }\r\n}\r\n\r\n// PUT - Actualizar una cita\r\nexport async function PUT(request) {\r\n  console.log('[PUT /api/citas] Iniciando petición...');\r\n  let conn;\r\n  try {\r\n    const data = await request.json();\r\n    console.log('[PUT /api/citas] Datos recibidos:', data);\r\n\r\n    const {\r\n      cita_id,\r\n      paciente_id,\r\n      doctor_id,\r\n      fecha_hora,\r\n      estado_id,\r\n      notas\r\n    } = data;\r\n\r\n    if (!cita_id) {\r\n      return NextResponse.json(\r\n        { error: 'ID de cita requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log('[PUT /api/citas] Conectando a la base de datos...');\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log('[PUT /api/citas] Conexión exitosa');\r\n\r\n    // Iniciar transacción\r\n    await conn.beginTransaction();\r\n    console.log('[PUT /api/citas] Transacción iniciada');\r\n\r\n    // Asignar current_user_id para los triggers\r\n    await conn.execute('SET @current_user_id = 1');\r\n    console.log('[PUT /api/citas] current_user_id asignado');\r\n\r\n    // Verificar si la cita existe\r\n    console.log('[PUT /api/citas] Verificando cita...');\r\n    const [cita] = await conn.execute(\r\n      'SELECT cita_id FROM citas WHERE cita_id = ?',\r\n      [cita_id]\r\n    );\r\n\r\n    if (!cita[0]) {\r\n      await conn.rollback();\r\n      console.log('[PUT /api/citas] Cita no encontrada');\r\n      return NextResponse.json(\r\n        { error: 'Cita no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar si el paciente existe si se está actualizando\r\n    if (paciente_id) {\r\n      console.log('[PUT /api/citas] Verificando paciente...');\r\n      const [paciente] = await conn.execute(\r\n        'SELECT user_id FROM usuarios WHERE user_id = ?',\r\n        [paciente_id]\r\n      );\r\n\r\n      if (!paciente[0]) {\r\n        await conn.rollback();\r\n        console.log('[PUT /api/citas] Paciente no encontrado');\r\n        return NextResponse.json(\r\n          { error: 'El paciente especificado no existe' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Verificar si el doctor existe si se está actualizando\r\n    if (doctor_id) {\r\n      console.log('[PUT /api/citas] Verificando doctor...');\r\n      const [doctor] = await conn.execute(\r\n        'SELECT user_id FROM usuarios WHERE user_id = ?',\r\n        [doctor_id]\r\n      );\r\n\r\n      if (!doctor[0]) {\r\n        await conn.rollback();\r\n        console.log('[PUT /api/citas] Doctor no encontrado');\r\n        return NextResponse.json(\r\n          { error: 'El doctor especificado no existe' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Verificar si el estado existe si se está actualizando\r\n    if (estado_id) {\r\n      console.log('[PUT /api/citas] Verificando estado...');\r\n      const [estado] = await conn.execute(\r\n        'SELECT estado_id FROM estado_citas WHERE estado_id = ?',\r\n        [estado_id]\r\n      );\r\n\r\n      if (!estado[0]) {\r\n        await conn.rollback();\r\n        console.log('[PUT /api/citas] Estado no encontrado');\r\n        return NextResponse.json(\r\n          { error: 'El estado especificado no existe' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Verificar disponibilidad del doctor si se está actualizando fecha/hora\r\n    if (doctor_id && fecha_hora) {\r\n      console.log('[PUT /api/citas] Verificando disponibilidad del doctor...');\r\n      const [citasExistentes] = await conn.execute(`\r\n        SELECT cita_id FROM citas \r\n        WHERE doctor_id = ? \r\n        AND fecha_hora = ?\r\n        AND estado_id != 3\r\n        AND cita_id != ?\r\n      `, [doctor_id, fecha_hora, cita_id]);\r\n\r\n      if (citasExistentes.length > 0) {\r\n        await conn.rollback();\r\n        console.log('[PUT /api/citas] Doctor no disponible en la fecha/hora especificada');\r\n        return NextResponse.json(\r\n          { error: 'El doctor no está disponible en la fecha y hora especificadas' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Actualizar la cita\r\n    console.log('[PUT /api/citas] Actualizando cita...');\r\n    await conn.execute(`\r\n      UPDATE citas\r\n      SET paciente_id = COALESCE(?, paciente_id),\r\n          doctor_id = COALESCE(?, doctor_id),\r\n          fecha_hora = COALESCE(?, fecha_hora),\r\n          estado_id = COALESCE(?, estado_id),\r\n          notas = COALESCE(?, notas)\r\n      WHERE cita_id = ?\r\n    `, [paciente_id, doctor_id, fecha_hora, estado_id, notas, cita_id]);\r\n\r\n    await conn.commit();\r\n    console.log('[PUT /api/citas] Transacción completada');\r\n\r\n    return NextResponse.json({\r\n      message: 'Cita actualizada exitosamente'\r\n    });\r\n  } catch (error) {\r\n    console.error('[PUT /api/citas] Error:', error);\r\n    console.error('[PUT /api/citas] Stack trace:', error.stack);\r\n    if (conn) {\r\n      await conn.rollback();\r\n      console.log('[PUT /api/citas] Transacción revertida');\r\n    }\r\n    return NextResponse.json(\r\n      { error: 'Error al actualizar cita' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log('[PUT /api/citas] Conexión cerrada');\r\n    }\r\n  }\r\n}\r\n\r\n// DELETE - Eliminar una cita\r\nexport async function DELETE(request) {\r\n  console.log('[DELETE /api/citas] Iniciando petición...');\r\n  let conn;\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const citaId = searchParams.get('citaId');\r\n    console.log('[DELETE /api/citas] ID de cita:', citaId);\r\n\r\n    if (!citaId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de cita requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log('[DELETE /api/citas] Conectando a la base de datos...');\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log('[DELETE /api/citas] Conexión exitosa');\r\n\r\n    // Iniciar transacción\r\n    await conn.beginTransaction();\r\n    console.log('[DELETE /api/citas] Transacción iniciada');\r\n\r\n    // Asignar current_user_id para los triggers\r\n    await conn.execute('SET @current_user_id = 1');\r\n    console.log('[DELETE /api/citas] current_user_id asignado');\r\n\r\n    // Verificar si la cita existe\r\n    console.log('[DELETE /api/citas] Verificando cita...');\r\n    const [cita] = await conn.execute(\r\n      'SELECT cita_id FROM citas WHERE cita_id = ?',\r\n      [citaId]\r\n    );\r\n\r\n    if (!cita[0]) {\r\n      await conn.rollback();\r\n      console.log('[DELETE /api/citas] Cita no encontrada');\r\n      return NextResponse.json(\r\n        { error: 'Cita no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Eliminar la cita\r\n    console.log('[DELETE /api/citas] Eliminando cita...');\r\n    await conn.execute('DELETE FROM citas WHERE cita_id = ?', [citaId]);\r\n\r\n    await conn.commit();\r\n    console.log('[DELETE /api/citas] Transacción completada');\r\n\r\n    return NextResponse.json({\r\n      message: 'Cita eliminada exitosamente'\r\n    });\r\n  } catch (error) {\r\n    console.error('[DELETE /api/citas] Error:', error);\r\n    console.error('[DELETE /api/citas] Stack trace:', error.stack);\r\n    if (conn) {\r\n      await conn.rollback();\r\n      console.log('[DELETE /api/citas] Transacción revertida');\r\n    }\r\n    return NextResponse.json(\r\n      { error: 'Error al eliminar cita' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log('[DELETE /api/citas] Conexión cerrada');\r\n    }\r\n  }\r\n} "],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,oCAAoC;AACpC,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAGO,eAAe,IAAI,OAAO;IAC/B,QAAQ,GAAG,CAAC;IACZ,IAAI;IACJ,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAChC,MAAM,aAAa,aAAa,GAAG,CAAC;QACpC,MAAM,WAAW,aAAa,GAAG,CAAC;QAClC,QAAQ,GAAG,CAAC,gCAAgC;YAAE;YAAQ;YAAY;QAAS;QAE3E,QAAQ,GAAG,CAAC;QACZ,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QACpC,QAAQ,GAAG,CAAC;QAEZ,4CAA4C;QAC5C,MAAM,KAAK,OAAO,CAAC;QACnB,QAAQ,GAAG,CAAC;QAEZ,IAAI,QAAQ,CAAC;;;;;;;;;;;;;IAab,CAAC;QACD,MAAM,SAAS,EAAE;QAEjB,IAAI,QAAQ;YACV,SAAS;YACT,OAAO,IAAI,CAAC;QACd;QACA,IAAI,YAAY;YACd,SAAS;YACT,OAAO,IAAI,CAAC;QACd;QACA,IAAI,UAAU;YACZ,SAAS;YACT,OAAO,IAAI,CAAC;QACd;QAEA,QAAQ,GAAG,CAAC,sCAAsC;QAClD,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAAC,OAAO;QACzC,QAAQ,GAAG,CAAC,gCAAgC;QAE5C,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,EAAE,GAAG;IAC9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,QAAQ,KAAK,CAAC,iCAAiC,MAAM,KAAK;QAC1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,MAAM;YACR,MAAM,KAAK,GAAG;YACd,QAAQ,GAAG,CAAC;QACd;IACF;AACF;AAGO,eAAe,KAAK,OAAO;IAChC,QAAQ,GAAG,CAAC;IACZ,IAAI;IACJ,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,sCAAsC;QAElD,MAAM,EACJ,WAAW,EACX,SAAS,EACT,UAAU,EACV,SAAS,EACT,KAAK,EACN,GAAG;QAEJ,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,cAAc,CAAC,WAAW;YAC3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QACpC,QAAQ,GAAG,CAAC;QAEZ,sBAAsB;QACtB,MAAM,KAAK,gBAAgB;QAC3B,QAAQ,GAAG,CAAC;QAEZ,4CAA4C;QAC5C,MAAM,KAAK,OAAO,CAAC;QACnB,QAAQ,GAAG,CAAC;QAEZ,kCAAkC;QAClC,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAC,SAAS,GAAG,MAAM,KAAK,OAAO,CACnC,kDACA;YAAC;SAAY;QAGf,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,KAAK,QAAQ;YACnB,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,gCAAgC;QAChC,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAC,OAAO,GAAG,MAAM,KAAK,OAAO,CACjC,kDACA;YAAC;SAAU;QAGb,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;YACd,MAAM,KAAK,QAAQ;YACnB,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,gCAAgC;QAChC,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAC,OAAO,GAAG,MAAM,KAAK,OAAO,CACjC,0DACA;YAAC;SAAU;QAGb,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;YACd,MAAM,KAAK,QAAQ;YACnB,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAC,gBAAgB,GAAG,MAAM,KAAK,OAAO,CAAC,CAAC;;;;;IAK9C,CAAC,EAAE;YAAC;YAAW;SAAW;QAE1B,IAAI,gBAAgB,MAAM,GAAG,GAAG;YAC9B,MAAM,KAAK,QAAQ;YACnB,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgE,GACzE;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAC,OAAO,GAAG,MAAM,KAAK,OAAO,CAAC,CAAC;;;;;;;;IAQrC,CAAC,EAAE;YAAC;YAAa;YAAW;YAAY;YAAW,SAAS;SAAK;QAEjE,MAAM,KAAK,MAAM;QACjB,QAAQ,GAAG,CAAC;QAEZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS,OAAO,QAAQ;QAC1B,GAAG;YAAE,QAAQ;QAAI;IACnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,QAAQ,KAAK,CAAC,kCAAkC,MAAM,KAAK;QAC3D,IAAI,MAAM;YACR,MAAM,KAAK,QAAQ;YACnB,QAAQ,GAAG,CAAC;QACd;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAsB,GAC/B;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,MAAM;YACR,MAAM,KAAK,GAAG;YACd,QAAQ,GAAG,CAAC;QACd;IACF;AACF;AAGO,eAAe,IAAI,OAAO;IAC/B,QAAQ,GAAG,CAAC;IACZ,IAAI;IACJ,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,qCAAqC;QAEjD,MAAM,EACJ,OAAO,EACP,WAAW,EACX,SAAS,EACT,UAAU,EACV,SAAS,EACT,KAAK,EACN,GAAG;QAEJ,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QACpC,QAAQ,GAAG,CAAC;QAEZ,sBAAsB;QACtB,MAAM,KAAK,gBAAgB;QAC3B,QAAQ,GAAG,CAAC;QAEZ,4CAA4C;QAC5C,MAAM,KAAK,OAAO,CAAC;QACnB,QAAQ,GAAG,CAAC;QAEZ,8BAA8B;QAC9B,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAC/B,+CACA;YAAC;SAAQ;QAGX,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACZ,MAAM,KAAK,QAAQ;YACnB,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,0DAA0D;QAC1D,IAAI,aAAa;YACf,QAAQ,GAAG,CAAC;YACZ,MAAM,CAAC,SAAS,GAAG,MAAM,KAAK,OAAO,CACnC,kDACA;gBAAC;aAAY;YAGf,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;gBAChB,MAAM,KAAK,QAAQ;gBACnB,QAAQ,GAAG,CAAC;gBACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAqC,GAC9C;oBAAE,QAAQ;gBAAI;YAElB;QACF;QAEA,wDAAwD;QACxD,IAAI,WAAW;YACb,QAAQ,GAAG,CAAC;YACZ,MAAM,CAAC,OAAO,GAAG,MAAM,KAAK,OAAO,CACjC,kDACA;gBAAC;aAAU;YAGb,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;gBACd,MAAM,KAAK,QAAQ;gBACnB,QAAQ,GAAG,CAAC;gBACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAmC,GAC5C;oBAAE,QAAQ;gBAAI;YAElB;QACF;QAEA,wDAAwD;QACxD,IAAI,WAAW;YACb,QAAQ,GAAG,CAAC;YACZ,MAAM,CAAC,OAAO,GAAG,MAAM,KAAK,OAAO,CACjC,0DACA;gBAAC;aAAU;YAGb,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;gBACd,MAAM,KAAK,QAAQ;gBACnB,QAAQ,GAAG,CAAC;gBACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAmC,GAC5C;oBAAE,QAAQ;gBAAI;YAElB;QACF;QAEA,yEAAyE;QACzE,IAAI,aAAa,YAAY;YAC3B,QAAQ,GAAG,CAAC;YACZ,MAAM,CAAC,gBAAgB,GAAG,MAAM,KAAK,OAAO,CAAC,CAAC;;;;;;MAM9C,CAAC,EAAE;gBAAC;gBAAW;gBAAY;aAAQ;YAEnC,IAAI,gBAAgB,MAAM,GAAG,GAAG;gBAC9B,MAAM,KAAK,QAAQ;gBACnB,QAAQ,GAAG,CAAC;gBACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAgE,GACzE;oBAAE,QAAQ;gBAAI;YAElB;QACF;QAEA,qBAAqB;QACrB,QAAQ,GAAG,CAAC;QACZ,MAAM,KAAK,OAAO,CAAC,CAAC;;;;;;;;IAQpB,CAAC,EAAE;YAAC;YAAa;YAAW;YAAY;YAAW;YAAO;SAAQ;QAElE,MAAM,KAAK,MAAM;QACjB,QAAQ,GAAG,CAAC;QAEZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,QAAQ,KAAK,CAAC,iCAAiC,MAAM,KAAK;QAC1D,IAAI,MAAM;YACR,MAAM,KAAK,QAAQ;YACnB,QAAQ,GAAG,CAAC;QACd;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,MAAM;YACR,MAAM,KAAK,GAAG;YACd,QAAQ,GAAG,CAAC;QACd;IACF;AACF;AAGO,eAAe,OAAO,OAAO;IAClC,QAAQ,GAAG,CAAC;IACZ,IAAI;IACJ,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAChC,QAAQ,GAAG,CAAC,mCAAmC;QAE/C,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QACpC,QAAQ,GAAG,CAAC;QAEZ,sBAAsB;QACtB,MAAM,KAAK,gBAAgB;QAC3B,QAAQ,GAAG,CAAC;QAEZ,4CAA4C;QAC5C,MAAM,KAAK,OAAO,CAAC;QACnB,QAAQ,GAAG,CAAC;QAEZ,8BAA8B;QAC9B,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAC/B,+CACA;YAAC;SAAO;QAGV,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACZ,MAAM,KAAK,QAAQ;YACnB,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,mBAAmB;QACnB,QAAQ,GAAG,CAAC;QACZ,MAAM,KAAK,OAAO,CAAC,uCAAuC;YAAC;SAAO;QAElE,MAAM,KAAK,MAAM;QACjB,QAAQ,GAAG,CAAC;QAEZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,QAAQ,KAAK,CAAC,oCAAoC,MAAM,KAAK;QAC7D,IAAI,MAAM;YACR,MAAM,KAAK,QAAQ;YACnB,QAAQ,GAAG,CAAC;QACd;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,MAAM;YACR,MAAM,KAAK,GAAG;YACd,QAAQ,GAAG,CAAC;QACd;IACF;AACF"}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}