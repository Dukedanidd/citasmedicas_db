{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/citas/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport connection from '@/database/connection';\nimport { promisify } from 'util';\n\n// Convertir los métodos de callback a promesas\nconst query = promisify(connection.query).bind(connection);\n\n// GET - Obtener todas las citas de un paciente\nexport async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const pacienteId = searchParams.get('pacienteId');\n\n        if (!pacienteId) {\n            return NextResponse.json({ error: 'ID de paciente requerido' }, { status: 400 });\n        }\n\n        const citas = await query(`\n            SELECT c.*, m.nombre as doctor_nombre, m.especialidad\n            FROM citas c\n            JOIN medicos m ON c.doctor_id = m.doctor_id\n            WHERE c.paciente_id = ?\n            ORDER BY c.fecha, c.hora\n        `, [pacienteId]);\n\n        return NextResponse.json(citas);\n    } catch (error) {\n        console.error('Error al obtener citas:', error);\n        return NextResponse.json({ error: 'Error al obtener citas' }, { status: 500 });\n    }\n}\n\n// POST - Crear una nueva cita\nexport async function POST(request) {\n    try {\n        const data = await request.json();\n        const { paciente_id, doctor_id, fecha, hora, motivo } = data;\n\n        // Verificar disponibilidad del doctor\n        const disponibilidad = await query(`\n            SELECT COUNT(*) as count\n            FROM citas\n            WHERE doctor_id = ? AND fecha = ? AND hora = ?\n        `, [doctor_id, fecha, hora]);\n\n        if (disponibilidad[0].count > 0) {\n            return NextResponse.json({ error: 'El horario no está disponible' }, { status: 400 });\n        }\n\n        // Insertar la nueva cita\n        const result = await query(`\n            INSERT INTO citas (paciente_id, doctor_id, fecha, hora, motivo, estado_id)\n            VALUES (?, ?, ?, ?, ?, 1)\n        `, [paciente_id, doctor_id, fecha, hora, motivo]);\n\n        return NextResponse.json({ \n            message: 'Cita creada exitosamente',\n            cita_id: result.insertId \n        });\n    } catch (error) {\n        console.error('Error al crear cita:', error);\n        return NextResponse.json({ error: 'Error al crear cita' }, { status: 500 });\n    }\n}\n\n// PUT - Actualizar una cita\nexport async function PUT(request) {\n    try {\n        const data = await request.json();\n        const { cita_id, fecha, hora, motivo } = data;\n\n        // Verificar disponibilidad del doctor\n        const citaActual = await query('SELECT doctor_id FROM citas WHERE cita_id = ?', [cita_id]);\n        if (!citaActual.length) {\n            return NextResponse.json({ error: 'Cita no encontrada' }, { status: 404 });\n        }\n\n        const disponibilidad = await query(`\n            SELECT COUNT(*) as count\n            FROM citas\n            WHERE doctor_id = ? AND fecha = ? AND hora = ? AND cita_id != ?\n        `, [citaActual[0].doctor_id, fecha, hora, cita_id]);\n\n        if (disponibilidad[0].count > 0) {\n            return NextResponse.json({ error: 'El horario no está disponible' }, { status: 400 });\n        }\n\n        // Actualizar la cita\n        await query(`\n            UPDATE citas\n            SET fecha = ?, hora = ?, motivo = ?\n            WHERE cita_id = ?\n        `, [fecha, hora, motivo, cita_id]);\n\n        return NextResponse.json({ message: 'Cita actualizada exitosamente' });\n    } catch (error) {\n        console.error('Error al actualizar cita:', error);\n        return NextResponse.json({ error: 'Error al actualizar cita' }, { status: 500 });\n    }\n}\n\n// DELETE - Eliminar una cita\nexport async function DELETE(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const citaId = searchParams.get('citaId');\n\n        if (!citaId) {\n            return NextResponse.json({ error: 'ID de cita requerido' }, { status: 400 });\n        }\n\n        await query('DELETE FROM citas WHERE cita_id = ?', [citaId]);\n\n        return NextResponse.json({ message: 'Cita eliminada exitosamente' });\n    } catch (error) {\n        console.error('Error al eliminar cita:', error);\n        return NextResponse.json({ error: 'Error al eliminar cita' }, { status: 500 });\n    }\n} "],"names":[],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;AAEA,+CAA+C;AAC/C,MAAM,QAAQ,CAAA,GAAA,iGAAA,CAAA,YAAS,AAAD,EAAE,WAAW,KAAK,EAAE,IAAI,CAAC;AAGxC,eAAe,IAAI,OAAO;IAC7B,IAAI;QACA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,aAAa,aAAa,GAAG,CAAC;QAEpC,IAAI,CAAC,YAAY;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,MAAM,QAAQ,MAAM,MAAM,CAAC;;;;;;QAM3B,CAAC,EAAE;YAAC;SAAW;QAEf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAChF;AACJ;AAGO,eAAe,KAAK,OAAO;IAC9B,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG;QAExD,sCAAsC;QACtC,MAAM,iBAAiB,MAAM,MAAM,CAAC;;;;QAIpC,CAAC,EAAE;YAAC;YAAW;YAAO;SAAK;QAE3B,IAAI,cAAc,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,yBAAyB;QACzB,MAAM,SAAS,MAAM,MAAM,CAAC;;;QAG5B,CAAC,EAAE;YAAC;YAAa;YAAW;YAAO;YAAM;SAAO;QAEhD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,SAAS,OAAO,QAAQ;QAC5B;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACJ;AAGO,eAAe,IAAI,OAAO;IAC7B,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG;QAEzC,sCAAsC;QACtC,MAAM,aAAa,MAAM,MAAM,iDAAiD;YAAC;SAAQ;QACzF,IAAI,CAAC,WAAW,MAAM,EAAE;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,MAAM,iBAAiB,MAAM,MAAM,CAAC;;;;QAIpC,CAAC,EAAE;YAAC,UAAU,CAAC,EAAE,CAAC,SAAS;YAAE;YAAO;YAAM;SAAQ;QAElD,IAAI,cAAc,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,qBAAqB;QACrB,MAAM,MAAM,CAAC;;;;QAIb,CAAC,EAAE;YAAC;YAAO;YAAM;YAAQ;SAAQ;QAEjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAgC;IACxE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAClF;AACJ;AAGO,eAAe,OAAO,OAAO;IAChC,IAAI;QACA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,CAAC,QAAQ;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,MAAM,MAAM,uCAAuC;YAAC;SAAO;QAE3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA8B;IACtE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAChF;AACJ"}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}