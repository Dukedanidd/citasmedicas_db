{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/doctores/route.js"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { pool } from '@/lib/db'\n\nexport async function GET() {\n  try {\n    const [rows] = await pool.query(`\n      SELECT d.*, c.nombre as consultorio_nombre \n      FROM doctores d \n      LEFT JOIN consultorios c ON d.consultorio_id = c.consultorio_id\n    `)\n    return NextResponse.json(rows)\n  } catch (error) {\n    console.error('Error al obtener doctores:', error)\n    return NextResponse.json({ error: 'Error al obtener doctores' }, { status: 500 })\n  }\n}\n\nexport async function POST(request) {\n  try {\n    const data = await request.json()\n    console.log('[POST /api/doctores] Datos recibidos:', data)\n\n    // Verificar si el email ya existe\n    const [existingDoctors] = await pool.query(\n      'SELECT * FROM doctores WHERE email = ?',\n      [data.email]\n    )\n\n    if (existingDoctors.length > 0) {\n      return NextResponse.json(\n        { error: 'El email ya está registrado' },\n        { status: 400 }\n      )\n    }\n\n    // Insertar el doctor\n    const [result] = await pool.query(\n      `INSERT INTO doctores (\n        primer_nombre, \n        segundo_nombre, \n        apellido_paterno, \n        apellido_materno, \n        email, \n        password,\n        especialidad\n      ) VALUES (?, ?, ?, ?, ?, ?, ?)`,\n      [\n        data.primer_nombre,\n        data.segundo_nombre || null,\n        data.apellido_paterno,\n        data.apellido_materno || null,\n        data.email,\n        data.password,\n        data.especialidad\n      ]\n    )\n\n    // Obtener el doctor recién creado\n    const [newDoctor] = await pool.query(\n      'SELECT * FROM doctores WHERE doctor_id = ?',\n      [result.insertId]\n    )\n\n    return NextResponse.json(newDoctor[0])\n  } catch (error) {\n    console.error('Error al crear doctor:', error)\n    return NextResponse.json(\n      { error: 'Error al crear doctor' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function PUT(request) {\n  try {\n    const data = await request.json()\n\n    // Verificar si el email ya existe para otro doctor\n    const [existingDoctors] = await pool.query(\n      'SELECT * FROM doctores WHERE email = ? AND doctor_id != ?',\n      [data.email, data.doctor_id]\n    )\n\n    if (existingDoctors.length > 0) {\n      return NextResponse.json(\n        { error: 'El email ya está registrado' },\n        { status: 400 }\n      )\n    }\n\n    // Construir la consulta de actualización\n    let updateQuery = `\n      UPDATE doctores \n      SET primer_nombre = ?,\n          segundo_nombre = ?,\n          apellido_paterno = ?,\n          apellido_materno = ?,\n          email = ?,\n          especialidad = ?\n    `\n    const queryParams = [\n      data.primer_nombre,\n      data.segundo_nombre || null,\n      data.apellido_paterno,\n      data.apellido_materno || null,\n      data.email,\n      data.especialidad\n    ]\n\n    // Si se proporciona una nueva contraseña, actualizarla\n    if (data.password) {\n      updateQuery += ', password = ?'\n      queryParams.push(data.password)\n    }\n\n    updateQuery += ' WHERE doctor_id = ?'\n    queryParams.push(data.doctor_id)\n\n    await pool.query(updateQuery, queryParams)\n\n    // Obtener el doctor actualizado\n    const [updatedDoctor] = await pool.query(\n      'SELECT * FROM doctores WHERE doctor_id = ?',\n      [data.doctor_id]\n    )\n\n    return NextResponse.json(updatedDoctor[0])\n  } catch (error) {\n    console.error('Error al actualizar doctor:', error)\n    return NextResponse.json(\n      { error: 'Error al actualizar doctor' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const doctorId = searchParams.get('doctorId')\n\n    if (!doctorId) {\n      return NextResponse.json(\n        { error: 'ID de doctor no proporcionado' },\n        { status: 400 }\n      )\n    }\n\n    await pool.query('DELETE FROM doctores WHERE doctor_id = ?', [doctorId])\n\n    return NextResponse.json({ message: 'Doctor eliminado correctamente' })\n  } catch (error) {\n    console.error('Error al eliminar doctor:', error)\n    return NextResponse.json(\n      { error: 'Error al eliminar doctor' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}