{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/doctores/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mysql from 'mysql2/promise';\n\n// Configuración de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'clinica_db'\n};\n\n// GET /api/doctores - Obtener todos los doctores\nexport async function GET() {\n  console.log('[GET /api/doctores] Iniciando petición...');\n  let conn;\n  try {\n    console.log('[GET /api/doctores] Conectando a la base de datos...');\n    conn = await mysql.createConnection(dbConfig);\n    console.log('[GET /api/doctores] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[GET /api/doctores] current_user_id asignado');\n\n    console.log('[GET /api/doctores] Ejecutando consulta SQL...');\n    const [rows] = await conn.execute(`\n      SELECT u.user_id AS doctor_id, u.primer_nombre, u.apellido_paterno,\n             u.email, m.especialidad, c.nombre AS consultorio\n      FROM medicos m\n      JOIN usuarios u ON m.doctor_id = u.user_id\n      JOIN consultorios c ON m.consultorio_id = c.consultorio_id\n    `);\n    console.log('[GET /api/doctores] Consulta ejecutada. Resultados:', rows);\n\n    return NextResponse.json(rows);\n  } catch (err) {\n    console.error('[GET /api/doctores] Error:', err);\n    console.error('[GET /api/doctores] Stack trace:', err.stack);\n    return NextResponse.json(\n      { error: 'Error al obtener los doctores' },\n      { status: 500 }\n    );\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log('[GET /api/doctores] Conexión cerrada');\n    }\n  }\n}\n\n// POST /api/doctores - Crear un nuevo doctor\nexport async function POST(request: Request) {\n  console.log('[POST /api/doctores] Iniciando petición...');\n  let conn;\n  try {\n    const body = await request.json();\n    console.log('[POST /api/doctores] Datos recibidos:', { ...body, password: '***' });\n\n    const { \n      primer_nombre, \n      segundo_nombre, \n      apellido_paterno, \n      apellido_materno, \n      email, \n      password, \n      especialidad, \n      consultorio_id \n    } = body;\n\n    if (!primer_nombre || !apellido_paterno || !email || !password || !especialidad || !consultorio_id) {\n      return NextResponse.json(\n        { error: 'Faltan campos requeridos' },\n        { status: 400 }\n      );\n    }\n\n    console.log('[POST /api/doctores] Conectando a la base de datos...');\n    conn = await mysql.createConnection(dbConfig);\n    console.log('[POST /api/doctores] Conexión exitosa');\n\n    // Iniciar transacción\n    await conn.beginTransaction();\n    console.log('[POST /api/doctores] Transacción iniciada');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[POST /api/doctores] current_user_id asignado');\n\n    // Obtener el role_id para médicos\n    console.log('[POST /api/doctores] Obteniendo role_id para médicos...');\n    const [roles] = await conn.execute(\n      'SELECT role_id FROM roles WHERE nombre = ?',\n      ['doctor']\n    );\n    \n    if (!roles[0]) {\n      await conn.rollback();\n      console.log('[POST /api/doctores] No se encontró el rol de doctor');\n      return NextResponse.json(\n        { error: 'No se encontró el rol de doctor en la base de datos' },\n        { status: 500 }\n      );\n    }\n\n    const role_id = roles[0].role_id;\n    console.log('[POST /api/doctores] Role_id obtenido:', role_id);\n\n    // Verificar si el email ya existe\n    console.log('[POST /api/doctores] Verificando email...');\n    const [existingUser] = await conn.execute(\n      'SELECT user_id FROM usuarios WHERE email = ?',\n      [email]\n    );\n\n    if (existingUser[0]) {\n      await conn.rollback();\n      console.log('[POST /api/doctores] Email ya existe');\n      return NextResponse.json(\n        { error: 'El email ya está registrado' },\n        { status: 400 }\n      );\n    }\n\n    // Insertar usuario\n    console.log('[POST /api/doctores] Creando usuario...');\n    const [userResult] = await conn.execute(`\n      INSERT INTO usuarios (\n        primer_nombre, segundo_nombre, apellido_paterno, apellido_materno,\n        email, password, role_id\n      ) VALUES (?, ?, ?, ?, ?, ?, ?)\n    `, [\n      primer_nombre, segundo_nombre || null, apellido_paterno,\n      apellido_materno || null, email, password, role_id\n    ]);\n\n    const doctor_id = userResult.insertId;\n    console.log('[POST /api/doctores] Usuario creado con ID:', doctor_id);\n\n    // Actualizar el médico creado por el trigger con la especialidad y consultorio\n    console.log('[POST /api/doctores] Actualizando datos del médico...');\n    await conn.execute(`\n      UPDATE medicos \n      SET especialidad = ?, consultorio_id = ?\n      WHERE doctor_id = ?\n    `, [especialidad, consultorio_id, doctor_id]);\n\n    await conn.commit();\n    console.log('[POST /api/doctores] Transacción completada');\n\n    // Obtener los datos completos del doctor recién creado\n    const [newDoctorData] = await conn.execute(`\n      SELECT u.user_id AS doctor_id, u.primer_nombre, u.apellido_paterno,\n             u.email, m.especialidad, c.nombre AS consultorio\n      FROM medicos m\n      JOIN usuarios u ON m.doctor_id = u.user_id\n      JOIN consultorios c ON m.consultorio_id = c.consultorio_id\n      WHERE u.user_id = ?\n    `, [doctor_id]);\n\n    return NextResponse.json(newDoctorData[0], { status: 201 });\n  } catch (error) {\n    console.error('[POST /api/doctores] Error:', error);\n    console.error('[POST /api/doctores] Stack trace:', error.stack);\n    if (conn) {\n      await conn.rollback();\n      console.log('[POST /api/doctores] Transacción revertida');\n    }\n    return NextResponse.json(\n      { error: 'Error al crear el doctor' },\n      { status: 500 }\n    );\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log('[POST /api/doctores] Conexión cerrada');\n    }\n  }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}