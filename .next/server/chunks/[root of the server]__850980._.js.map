{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/arman/ISC/citasmedicas_db/app/api/doctores/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport mysql from 'mysql2/promise';\r\n\r\n// Configuración de la base de datos\r\nconst dbConfig = {\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || '',\r\n  database: process.env.DB_NAME || 'clinica_db'\r\n};\r\n\r\n// GET /api/doctores - Obtener todos los doctores\r\nexport async function GET() {\r\n  console.log('[GET /api/doctores] Iniciando petición...');\r\n  let conn;\r\n  try {\r\n    console.log('[GET /api/doctores] Conectando a la base de datos...');\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log('[GET /api/doctores] Conexión exitosa');\r\n\r\n    // Asignar current_user_id para los triggers\r\n    await conn.execute('SET @current_user_id = 1');\r\n    console.log('[GET /api/doctores] current_user_id asignado');\r\n\r\n    console.log('[GET /api/doctores] Ejecutando consulta SQL...');\r\n    const [rows] = await conn.execute(`\r\n      SELECT u.user_id AS doctor_id, u.primer_nombre, u.apellido_paterno,\r\n             u.email, m.especialidad, c.nombre AS consultorio\r\n      FROM medicos m\r\n      JOIN usuarios u ON m.doctor_id = u.user_id\r\n      JOIN consultorios c ON m.consultorio_id = c.consultorio_id\r\n    `);\r\n    console.log('[GET /api/doctores] Consulta ejecutada. Resultados:', rows);\r\n\r\n    return NextResponse.json(rows);\r\n  } catch (err) {\r\n    console.error('[GET /api/doctores] Error:', err);\r\n    console.error('[GET /api/doctores] Stack trace:', err.stack);\r\n    return NextResponse.json(\r\n      { error: 'Error al obtener los doctores' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log('[GET /api/doctores] Conexión cerrada');\r\n    }\r\n  }\r\n}\r\n\r\n// POST /api/doctores - Crear un nuevo doctor\r\nexport async function POST(request: Request) {\r\n  console.log('[POST /api/doctores] Iniciando petición...');\r\n  let conn;\r\n  try {\r\n    const body = await request.json();\r\n    console.log('[POST /api/doctores] Datos recibidos:', { ...body, password: '***' });\r\n\r\n    const { \r\n      primer_nombre, \r\n      segundo_nombre, \r\n      apellido_paterno, \r\n      apellido_materno, \r\n      email, \r\n      password, \r\n      especialidad, \r\n      consultorio_id \r\n    } = body;\r\n\r\n    if (!primer_nombre || !apellido_paterno || !email || !password || !especialidad || !consultorio_id) {\r\n      return NextResponse.json(\r\n        { error: 'Faltan campos requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log('[POST /api/doctores] Conectando a la base de datos...');\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log('[POST /api/doctores] Conexión exitosa');\r\n\r\n    // Iniciar transacción\r\n    await conn.beginTransaction();\r\n    console.log('[POST /api/doctores] Transacción iniciada');\r\n\r\n    // Asignar current_user_id para los triggers\r\n    await conn.execute('SET @current_user_id = 1');\r\n    console.log('[POST /api/doctores] current_user_id asignado');\r\n\r\n    // Obtener el role_id para médicos\r\n    console.log('[POST /api/doctores] Obteniendo role_id para médicos...');\r\n    const [roles] = await conn.execute(\r\n      'SELECT role_id FROM roles WHERE nombre = ?',\r\n      ['doctor']\r\n    );\r\n    \r\n    if (!roles[0]) {\r\n      await conn.rollback();\r\n      console.log('[POST /api/doctores] No se encontró el rol de doctor');\r\n      return NextResponse.json(\r\n        { error: 'No se encontró el rol de doctor en la base de datos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const role_id = roles[0].role_id;\r\n    console.log('[POST /api/doctores] Role_id obtenido:', role_id);\r\n\r\n    // Verificar si el email ya existe\r\n    console.log('[POST /api/doctores] Verificando email...');\r\n    const [existingUser] = await conn.execute(\r\n      'SELECT user_id FROM usuarios WHERE email = ?',\r\n      [email]\r\n    );\r\n\r\n    if (existingUser[0]) {\r\n      await conn.rollback();\r\n      console.log('[POST /api/doctores] Email ya existe');\r\n      return NextResponse.json(\r\n        { error: 'El email ya está registrado' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Insertar usuario\r\n    console.log('[POST /api/doctores] Creando usuario...');\r\n    const [userResult] = await conn.execute(`\r\n      INSERT INTO usuarios (\r\n        primer_nombre, segundo_nombre, apellido_paterno, apellido_materno,\r\n        email, password, role_id\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?)\r\n    `, [\r\n      primer_nombre, segundo_nombre || null, apellido_paterno,\r\n      apellido_materno || null, email, password, role_id\r\n    ]);\r\n\r\n    const doctor_id = userResult.insertId;\r\n    console.log('[POST /api/doctores] Usuario creado con ID:', doctor_id);\r\n\r\n    // Actualizar el médico creado por el trigger con la especialidad y consultorio\r\n    console.log('[POST /api/doctores] Actualizando datos del médico...');\r\n    await conn.execute(`\r\n      UPDATE medicos \r\n      SET especialidad = ?, consultorio_id = ?\r\n      WHERE doctor_id = ?\r\n    `, [especialidad, consultorio_id, doctor_id]);\r\n\r\n    await conn.commit();\r\n    console.log('[POST /api/doctores] Transacción completada');\r\n\r\n    // Obtener los datos completos del doctor recién creado\r\n    const [newDoctorData] = await conn.execute(`\r\n      SELECT u.user_id AS doctor_id, u.primer_nombre, u.apellido_paterno,\r\n             u.email, m.especialidad, c.nombre AS consultorio\r\n      FROM medicos m\r\n      JOIN usuarios u ON m.doctor_id = u.user_id\r\n      JOIN consultorios c ON m.consultorio_id = c.consultorio_id\r\n      WHERE u.user_id = ?\r\n    `, [doctor_id]);\r\n\r\n    return NextResponse.json(newDoctorData[0], { status: 201 });\r\n  } catch (error) {\r\n    console.error('[POST /api/doctores] Error:', error);\r\n    console.error('[POST /api/doctores] Stack trace:', error.stack);\r\n    if (conn) {\r\n      await conn.rollback();\r\n      console.log('[POST /api/doctores] Transacción revertida');\r\n    }\r\n    return NextResponse.json(\r\n      { error: 'Error al crear el doctor' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log('[POST /api/doctores] Conexión cerrada');\r\n    }\r\n  }\r\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}