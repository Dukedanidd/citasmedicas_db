{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/pacientes/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport connection from '@/database/connection';\nimport { promisify } from 'util';\n\n// Convertir los métodos de callback a promesas\nconst query = promisify(connection.query).bind(connection);\n\n// GET - Obtener todos los pacientes o un paciente específico\nexport async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const pacienteId = searchParams.get('pacienteId');\n\n        if (pacienteId) {\n            // Obtener un paciente específico\n            const [paciente] = await query(`\n                SELECT p.*, u.nombre, u.email, u.telefono\n                FROM pacientes p\n                JOIN usuarios u ON p.paciente_id = u.user_id\n                WHERE p.paciente_id = ?\n            `, [pacienteId]);\n\n            if (!paciente) {\n                return NextResponse.json({ error: 'Paciente no encontrado' }, { status: 404 });\n            }\n\n            return NextResponse.json(paciente);\n        }\n\n        // Obtener todos los pacientes\n        const pacientes = await query(`\n            SELECT p.*, u.nombre, u.email, u.telefono\n            FROM pacientes p\n            JOIN usuarios u ON p.paciente_id = u.user_id\n        `);\n\n        return NextResponse.json(pacientes);\n    } catch (error) {\n        console.error('Error al obtener pacientes:', error);\n        return NextResponse.json({ error: 'Error al obtener pacientes' }, { status: 500 });\n    }\n}\n\n// POST - Crear un nuevo paciente\nexport async function POST(request) {\n    try {\n        const data = await request.json();\n        const { nombre, email, password, telefono, fecha_nacimiento, genero, direccion } = data;\n\n        // Primero crear el usuario\n        const [usuarioResult] = await query(`\n            INSERT INTO usuarios (nombre, email, password, telefono, rol)\n            VALUES (?, ?, ?, ?, 'paciente')\n        `, [nombre, email, password, telefono]);\n\n        // Luego crear el paciente\n        await query(`\n            INSERT INTO pacientes (paciente_id, fecha_nacimiento, genero, direccion)\n            VALUES (?, ?, ?, ?)\n        `, [usuarioResult.insertId, fecha_nacimiento, genero, direccion]);\n\n        return NextResponse.json({ \n            message: 'Paciente creado exitosamente',\n            paciente_id: usuarioResult.insertId \n        });\n    } catch (error) {\n        console.error('Error al crear paciente:', error);\n        return NextResponse.json({ error: 'Error al crear paciente' }, { status: 500 });\n    }\n}\n\n// PUT - Actualizar un paciente\nexport async function PUT(request) {\n    try {\n        const data = await request.json();\n        const { paciente_id, nombre, email, telefono, fecha_nacimiento, genero, direccion } = data;\n\n        // Actualizar usuario\n        await query(`\n            UPDATE usuarios\n            SET nombre = ?, email = ?, telefono = ?\n            WHERE user_id = ?\n        `, [nombre, email, telefono, paciente_id]);\n\n        // Actualizar paciente\n        await query(`\n            UPDATE pacientes\n            SET fecha_nacimiento = ?, genero = ?, direccion = ?\n            WHERE paciente_id = ?\n        `, [fecha_nacimiento, genero, direccion, paciente_id]);\n\n        return NextResponse.json({ message: 'Paciente actualizado exitosamente' });\n    } catch (error) {\n        console.error('Error al actualizar paciente:', error);\n        return NextResponse.json({ error: 'Error al actualizar paciente' }, { status: 500 });\n    }\n}\n\n// DELETE - Eliminar un paciente\nexport async function DELETE(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const pacienteId = searchParams.get('pacienteId');\n\n        if (!pacienteId) {\n            return NextResponse.json({ error: 'ID de paciente requerido' }, { status: 400 });\n        }\n\n        // Eliminar el paciente (esto también eliminará el usuario debido a la restricción de clave foránea)\n        await query('DELETE FROM pacientes WHERE paciente_id = ?', [pacienteId]);\n\n        return NextResponse.json({ message: 'Paciente eliminado exitosamente' });\n    } catch (error) {\n        console.error('Error al eliminar paciente:', error);\n        return NextResponse.json({ error: 'Error al eliminar paciente' }, { status: 500 });\n    }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}