{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/doctores/%5Bid%5D/completo/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mysql from 'mysql2/promise';\n\n// Configuraci贸n de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'clinica_db'\n};\n\n// GET /api/doctores/[id]/completo - Obtener datos completos de un doctor\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  console.log('[GET /api/doctores/[id]/completo] Iniciando petici贸n...');\n  try {\n    const { id } = params;\n    console.log('[GET /api/doctores/[id]/completo] ID del doctor:', id);\n\n    console.log('[GET /api/doctores/[id]/completo] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[GET /api/doctores/[id]/completo] Conexi贸n exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[GET /api/doctores/[id]/completo] current_user_id asignado');\n\n    console.log('[GET /api/doctores/[id]/completo] Ejecutando consulta SQL...');\n    const [rows] = await conn.execute(\n      `SELECT u.user_id AS doctor_id, u.primer_nombre, u.segundo_nombre, u.apellido_paterno, u.apellido_materno,\n              u.email, m.especialidad, m.consultorio_id, c.nombre AS consultorio\n       FROM medicos m\n       JOIN usuarios u ON m.doctor_id = u.user_id\n       LEFT JOIN consultorios c ON m.consultorio_id = c.consultorio_id\n       WHERE u.user_id = ?`,\n      [id]\n    );\n    console.log('[GET /api/doctores/[id]/completo] Consulta ejecutada. Resultados:', rows);\n\n    await conn.end();\n    console.log('[GET /api/doctores/[id]/completo] Conexi贸n cerrada');\n\n    if (!rows[0]) {\n      return NextResponse.json(\n        { error: 'Doctor no encontrado' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(rows[0]);\n  } catch (err) {\n    console.error('[GET /api/doctores/[id]/completo] Error:', err);\n    console.error('[GET /api/doctores/[id]/completo] Stack trace:', err.stack);\n    return NextResponse.json(\n      { error: 'Error al obtener el doctor' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,oCAAoC;AACpC,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAGO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG;QACf,QAAQ,GAAG,CAAC,oDAAoD;QAEhE,QAAQ,GAAG,CAAC;QACZ,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QAC1C,QAAQ,GAAG,CAAC;QAEZ,4CAA4C;QAC5C,MAAM,KAAK,OAAO,CAAC;QACnB,QAAQ,GAAG,CAAC;QAEZ,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAC/B,CAAC;;;;;0BAKmB,CAAC,EACrB;YAAC;SAAG;QAEN,QAAQ,GAAG,CAAC,qEAAqE;QAEjF,MAAM,KAAK,GAAG;QACd,QAAQ,GAAG,CAAC;QAEZ,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;IAClC,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,QAAQ,KAAK,CAAC,kDAAkD,IAAI,KAAK;QACzE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}