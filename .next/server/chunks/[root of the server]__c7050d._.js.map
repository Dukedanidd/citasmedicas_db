{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/agenda/%5BdoctorId%5D/%5Bfecha%5D/route.js"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport connection from '../../../../../../database/connection'\n\nexport const GET = async (request, { params }) => {\n  try {\n    const { doctorId, fecha } = params\n\n    // Validar parámetros\n    if (!doctorId || !fecha) {\n      return NextResponse.json(\n        { error: 'Se requieren doctorId y fecha' },\n        { status: 400 }\n      )\n    }\n\n    // Consultar la agenda del doctor para la fecha específica\n    const query = `\n      SELECT agenda_id, doctor_id, fecha, hora_inicio, hora_fin, disponible\n      FROM agenda\n      WHERE doctor_id = ? AND fecha = ?\n    `\n\n    const [rows] = await connection.promise().query(query, [doctorId, fecha])\n\n    if (rows.length === 0) {\n      return NextResponse.json(\n        { error: 'No se encontró agenda para esta fecha' },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json(rows[0])\n  } catch (error) {\n    console.error('Error al obtener agenda:', error)\n    return NextResponse.json(\n      { error: 'Error al obtener la agenda' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;AAAA;;;;;;;;AAGO,MAAM,MAAM,OAAO,SAAS,EAAE,MAAM,EAAE;IAC3C,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG;QAE5B,qBAAqB;QACrB,IAAI,CAAC,YAAY,CAAC,OAAO;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,0DAA0D;QAC1D,MAAM,QAAQ,CAAC;;;;IAIf,CAAC;QAED,MAAM,CAAC,KAAK,GAAG,MAAM,WAAW,OAAO,GAAG,KAAK,CAAC,OAAO;YAAC;YAAU;SAAM;QAExE,IAAI,KAAK,MAAM,KAAK,GAAG;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwC,GACjD;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}