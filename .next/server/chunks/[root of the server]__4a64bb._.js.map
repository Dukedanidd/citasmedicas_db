{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/historial/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mysql from 'mysql2/promise';\n\n// Configuración de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'clinica_db'\n};\n\n// GET - Obtener historial médico\nexport async function GET(request) {\n  console.log('[GET /api/historial] Iniciando petición...');\n  let conn;\n  try {\n    const { searchParams } = new URL(request.url);\n    const historialId = searchParams.get('historialId');\n    const expedienteId = searchParams.get('expedienteId');\n\n    console.log('[GET /api/historial] Parámetros:', { historialId, expedienteId });\n\n    if (!historialId && !expedienteId) {\n      return NextResponse.json({ error: 'Se requiere ID de historial o expediente' }, { status: 400 });\n    }\n\n    console.log('[GET /api/historial] Conectando a la base de datos...');\n    conn = await mysql.createConnection(dbConfig);\n    console.log('[GET /api/historial] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[GET /api/historial] current_user_id asignado');\n\n    let query = `\n      SELECT h.*, e.paciente_id\n      FROM historial_medico h\n      JOIN expedientes e ON h.expediente_id = e.expediente_id\n      WHERE 1=1\n    `;\n    const params = [];\n\n    if (historialId) {\n      query += ' AND h.historial_id = ?';\n      params.push(historialId);\n    } else if (expedienteId) {\n      query += ' AND h.expediente_id = ?';\n      params.push(expedienteId);\n    }\n\n    query += ' ORDER BY h.fecha_registro DESC';\n\n    console.log('[GET /api/historial] Ejecutando consulta...');\n    const [rows] = await conn.execute(query, params);\n    console.log('[GET /api/historial] Resultados:', rows);\n\n    if (historialId && !rows[0]) {\n      return NextResponse.json({ error: 'Registro de historial no encontrado' }, { status: 404 });\n    }\n\n    return NextResponse.json(historialId ? rows[0] : rows);\n  } catch (error) {\n    console.error('[GET /api/historial] Error:', error);\n    console.error('[GET /api/historial] Stack trace:', error.stack);\n    return NextResponse.json({ error: 'Error al obtener historial médico' }, { status: 500 });\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log('[GET /api/historial] Conexión cerrada');\n    }\n  }\n}\n\n// POST - Crear nuevo registro de historial médico\nexport async function POST(request) {\n  console.log('[POST /api/historial] Iniciando petición...');\n  let conn;\n  try {\n    const data = await request.json();\n    console.log('[POST /api/historial] Datos recibidos:', data);\n\n    const { expediente_id, descripcion } = data;\n\n    if (!expediente_id || !descripcion) {\n      return NextResponse.json({ \n        error: 'expediente_id y descripcion son requeridos' \n      }, { status: 400 });\n    }\n\n    console.log('[POST /api/historial] Conectando a la base de datos...');\n    conn = await mysql.createConnection(dbConfig);\n    console.log('[POST /api/historial] Conexión exitosa');\n\n    // Iniciar transacción\n    await conn.beginTransaction();\n    console.log('[POST /api/historial] Transacción iniciada');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[POST /api/historial] current_user_id asignado');\n\n    // Verificar que el expediente existe\n    console.log('[POST /api/historial] Verificando expediente...');\n    const [expediente] = await conn.execute(\n      'SELECT expediente_id FROM expedientes WHERE expediente_id = ?',\n      [expediente_id]\n    );\n\n    if (!expediente[0]) {\n      await conn.rollback();\n      return NextResponse.json({ error: 'Expediente no encontrado' }, { status: 404 });\n    }\n\n    // Insertar el nuevo registro\n    console.log('[POST /api/historial] Creando registro...');\n    const [result] = await conn.execute(`\n      INSERT INTO historial_medico (expediente_id, descripcion, fecha)\n      VALUES (?, ?, NOW())\n    `, [expediente_id, descripcion]);\n\n    await conn.commit();\n    console.log('[POST /api/historial] Transacción completada');\n\n    return NextResponse.json({ \n      message: 'Registro de historial médico creado exitosamente',\n      historial_id: result.insertId \n    }, { status: 201 });\n  } catch (error) {\n    console.error('[POST /api/historial] Error:', error);\n    console.error('[POST /api/historial] Stack trace:', error.stack);\n    if (conn) {\n      await conn.rollback();\n      console.log('[POST /api/historial] Transacción revertida');\n    }\n    return NextResponse.json({ error: 'Error al crear registro de historial médico' }, { status: 500 });\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log('[POST /api/historial] Conexión cerrada');\n    }\n  }\n}\n\n// PUT - Actualizar registro de historial médico\nexport async function PUT(request) {\n  console.log('[PUT /api/historial] Iniciando petición...');\n  let conn;\n  try {\n    const data = await request.json();\n    console.log('[PUT /api/historial] Datos recibidos:', data);\n\n    const { historial_id, descripcion } = data;\n\n    if (!historial_id) {\n      return NextResponse.json({ error: 'historial_id es requerido' }, { status: 400 });\n    }\n\n    console.log('[PUT /api/historial] Conectando a la base de datos...');\n    conn = await mysql.createConnection(dbConfig);\n    console.log('[PUT /api/historial] Conexión exitosa');\n\n    // Iniciar transacción\n    await conn.beginTransaction();\n    console.log('[PUT /api/historial] Transacción iniciada');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[PUT /api/historial] current_user_id asignado');\n\n    // Verificar que el registro existe\n    console.log('[PUT /api/historial] Verificando existencia del registro...');\n    const [historial] = await conn.execute(\n      'SELECT historial_id FROM historial_medico WHERE historial_id = ?',\n      [historial_id]\n    );\n\n    if (!historial[0]) {\n      await conn.rollback();\n      return NextResponse.json({ error: 'Registro de historial no encontrado' }, { status: 404 });\n    }\n\n    // Actualizar el registro\n    console.log('[PUT /api/historial] Actualizando registro...');\n    await conn.execute(`\n      UPDATE historial_medico\n      SET descripcion = ?\n      WHERE historial_id = ?\n    `, [descripcion, historial_id]);\n\n    await conn.commit();\n    console.log('[PUT /api/historial] Transacción completada');\n\n    return NextResponse.json({ message: 'Registro de historial médico actualizado exitosamente' });\n  } catch (error) {\n    console.error('[PUT /api/historial] Error:', error);\n    console.error('[PUT /api/historial] Stack trace:', error.stack);\n    if (conn) {\n      await conn.rollback();\n      console.log('[PUT /api/historial] Transacción revertida');\n    }\n    return NextResponse.json({ error: 'Error al actualizar registro de historial médico' }, { status: 500 });\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log('[PUT /api/historial] Conexión cerrada');\n    }\n  }\n}\n\n// DELETE - Eliminar registro de historial médico\nexport async function DELETE(request) {\n  console.log('[DELETE /api/historial] Iniciando petición...');\n  let conn;\n  try {\n    const { searchParams } = new URL(request.url);\n    const historialId = searchParams.get('historialId');\n\n    if (!historialId) {\n      return NextResponse.json({ error: 'ID de historial requerido' }, { status: 400 });\n    }\n\n    console.log('[DELETE /api/historial] Conectando a la base de datos...');\n    conn = await mysql.createConnection(dbConfig);\n    console.log('[DELETE /api/historial] Conexión exitosa');\n\n    // Iniciar transacción\n    await conn.beginTransaction();\n    console.log('[DELETE /api/historial] Transacción iniciada');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[DELETE /api/historial] current_user_id asignado');\n\n    // Verificar que el registro existe\n    console.log('[DELETE /api/historial] Verificando existencia del registro...');\n    const [historial] = await conn.execute(\n      'SELECT historial_id FROM historial_medico WHERE historial_id = ?',\n      [historialId]\n    );\n\n    if (!historial[0]) {\n      await conn.rollback();\n      return NextResponse.json({ error: 'Registro de historial no encontrado' }, { status: 404 });\n    }\n\n    // Eliminar el registro\n    console.log('[DELETE /api/historial] Eliminando registro...');\n    await conn.execute('DELETE FROM historial_medico WHERE historial_id = ?', [historialId]);\n\n    await conn.commit();\n    console.log('[DELETE /api/historial] Transacción completada');\n\n    return NextResponse.json({ message: 'Registro de historial médico eliminado exitosamente' });\n  } catch (error) {\n    console.error('[DELETE /api/historial] Error:', error);\n    console.error('[DELETE /api/historial] Stack trace:', error.stack);\n    if (conn) {\n      await conn.rollback();\n      console.log('[DELETE /api/historial] Transacción revertida');\n    }\n    return NextResponse.json({ error: 'Error al eliminar registro de historial médico' }, { status: 500 });\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log('[DELETE /api/historial] Conexión cerrada');\n    }\n  }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}