{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/auth/check/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport mysql from \"mysql2/promise\";\n\n// Configuración de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || \"localhost\",\n  user: process.env.DB_USER || \"root\",\n  password: process.env.DB_PASSWORD || \"\",\n  database: process.env.DB_NAME || \"clinica_db\",\n};\n\nexport async function GET(request) {\n  console.log(\n    \"[GET /api/auth/check] Iniciando verificación de autenticación...\",\n  );\n  try {\n    const userId = request.headers.get(\"user-id\");\n    console.log(\"[GET /api/auth/check] ID del usuario:\", userId);\n\n    if (!userId) {\n      console.log(\"[GET /api/auth/check] No se proporcionó ID de usuario\");\n      return NextResponse.json({ authenticated: false }, { status: 401 });\n    }\n\n    console.log(\"[GET /api/auth/check] Conectando a la base de datos...\");\n    const conn = await mysql.createConnection(dbConfig);\n    console.log(\"[GET /api/auth/check] Conexión exitosa\");\n\n    // Obtener información del usuario y su rol\n    const [rows] = await conn.execute(\n      `SELECT u.user_id, u.email, r.nombre as rol\n       FROM usuarios u\n       JOIN roles r ON u.role_id = r.role_id\n       WHERE u.user_id = ?`,\n      [userId],\n    );\n\n    await conn.end();\n    console.log(\"[GET /api/auth/check] Conexión cerrada\");\n\n    if (!rows[0]) {\n      console.log(\"[GET /api/auth/check] Usuario no encontrado\");\n      return NextResponse.json({ authenticated: false }, { status: 401 });\n    }\n\n    console.log(\"[GET /api/auth/check] Usuario autenticado:\", rows[0]);\n    return NextResponse.json({\n      authenticated: true,\n      user: rows[0],\n    });\n  } catch (error) {\n    console.error(\"[GET /api/auth/check] Error:\", error);\n    console.error(\"[GET /api/auth/check] Stack trace:\", error.stack);\n    return NextResponse.json(\n      { error: \"Error al verificar autenticación\" },\n      { status: 500 },\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,oCAAoC;AACpC,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAEO,eAAe,IAAI,OAAO;IAC/B,QAAQ,GAAG,CACT;IAEF,IAAI;QACF,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC;QACnC,QAAQ,GAAG,CAAC,yCAAyC;QAErD,IAAI,CAAC,QAAQ;YACX,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,eAAe;YAAM,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QAC1C,QAAQ,GAAG,CAAC;QAEZ,2CAA2C;QAC3C,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAC/B,CAAC;;;0BAGmB,CAAC,EACrB;YAAC;SAAO;QAGV,MAAM,KAAK,GAAG;QACd,QAAQ,GAAG,CAAC;QAEZ,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,eAAe;YAAM,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,QAAQ,GAAG,CAAC,8CAA8C,IAAI,CAAC,EAAE;QACjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,eAAe;YACf,MAAM,IAAI,CAAC,EAAE;QACf;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,QAAQ,KAAK,CAAC,sCAAsC,MAAM,KAAK;QAC/D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmC,GAC5C;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}