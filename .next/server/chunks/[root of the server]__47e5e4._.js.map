{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/bitacora/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport mysql from 'mysql2/promise';\n\n// Configuración de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'clinica_db'\n};\n\n// GET /api/bitacora - obtener todas las entradas de la bitácora\nexport async function GET() {\n  console.log('[GET /api/bitacora] Iniciando petición...');\n  let conn;\n  try {\n    console.log('[GET /api/bitacora] Conectando a la base de datos...');\n    conn = await mysql.createConnection(dbConfig);\n    console.log('[GET /api/bitacora] Conexión existosa');\n\n    console.log('[GET /api/bitacora] Ejecutando consulta SQL...');\n    const[rows] = await conn.execute(`\n      SELECT \n        b.log_id,\n        b.tipo,\n        b.tabla_afectada,\n        b.registro_id,\n        b.usuario_id,\n        b.fecha_hora,\n        b.detalle,\n        u.email\n      FROM bitacora b\n      LEFT JOIN usuarios u ON b.usuario_id = u.user_id\n      ORDER BY b.fecha_hora DESC\n      `);\n      console.log('[GET /api/bitacora] Consulta ejecutada. Resultados: ', rows);\n\n      return NextResponse.json(rows);\n  } catch (err) {\n    console.error('[GET /api/bitacora] Error:', err);\n    console.error('[GET /api/bitacora] Stack trace:', err.stack);\n    return NextResponse.json(\n      { error: 'Error al obtener bitácora' },\n      { status: 500 }\n    );\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log('[GET /api/bitacora] Conexión cerrada');\n    }\n  }\n\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,oCAAoC;AACpC,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAGO,eAAe;IACpB,QAAQ,GAAG,CAAC;IACZ,IAAI;IACJ,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QACpC,QAAQ,GAAG,CAAC;QAEZ,QAAQ,GAAG,CAAC;QACZ,MAAK,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAAC,CAAC;;;;;;;;;;;;;MAahC,CAAC;QACD,QAAQ,GAAG,CAAC,wDAAwD;QAEpE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,QAAQ,KAAK,CAAC,oCAAoC,IAAI,KAAK;QAC3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,MAAM;YACR,MAAM,KAAK,GAAG;YACd,QAAQ,GAAG,CAAC;QACd;IACF;AAEF"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}