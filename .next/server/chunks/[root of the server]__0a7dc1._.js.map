{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/expedientes/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mysql from 'mysql2/promise';\n\n// Configuración de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'clinica_db'\n};\n\n// GET - Obtener todos los expedientes o un expediente específico\nexport async function GET(request) {\n  console.log('[GET /api/expedientes] Iniciando petición...');\n  try {\n    const { searchParams } = new URL(request.url);\n    const expedienteId = searchParams.get('expedienteId');\n    const pacienteId = searchParams.get('pacienteId');\n    console.log('[GET /api/expedientes] Parámetros:', { expedienteId, pacienteId });\n\n    console.log('[GET /api/expedientes] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[GET /api/expedientes] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[GET /api/expedientes] current_user_id asignado');\n\n    let query = `\n      SELECT \n        e.*,\n        p.paciente_id,\n        u.primer_nombre,\n        u.apellido_paterno,\n        m.especialidad as doctor_especialidad\n      FROM expedientes e\n      JOIN pacientes p ON e.paciente_id = p.paciente_id\n      JOIN usuarios u ON p.paciente_id = u.user_id\n      JOIN medicos m ON p.doctor_id = m.doctor_id\n    `;\n    const params = [];\n\n    if (expedienteId) {\n      query += ' WHERE e.expediente_id = ?';\n      params.push(expedienteId);\n    } else if (pacienteId) {\n      query += ' WHERE e.paciente_id = ?';\n      params.push(pacienteId);\n    }\n\n    console.log('[GET /api/expedientes] Ejecutando consulta...');\n    const [rows] = await conn.execute(query, params);\n    console.log('[GET /api/expedientes] Resultados:', rows);\n\n    await conn.end();\n    console.log('[GET /api/expedientes] Conexión cerrada');\n\n    if (expedienteId && !rows[0]) {\n      return NextResponse.json({ error: 'Expediente no encontrado' }, { status: 404 });\n    }\n\n    return NextResponse.json(expedienteId ? rows[0] : rows);\n  } catch (error) {\n    console.error('[GET /api/expedientes] Error:', error);\n    console.error('[GET /api/expedientes] Stack trace:', error.stack);\n    return NextResponse.json({ error: 'Error al obtener expedientes' }, { status: 500 });\n  }\n}\n\n// POST - Crear un nuevo expediente\nexport async function POST(request) {\n  console.log('[POST /api/expedientes] Iniciando petición...');\n  try {\n    const data = await request.json();\n    console.log('[POST /api/expedientes] Datos recibidos:', data);\n\n    const { paciente_id, notas_generales } = data;\n\n    console.log('[POST /api/expedientes] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[POST /api/expedientes] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[POST /api/expedientes] current_user_id asignado');\n\n    // Verificar si el paciente ya tiene un expediente\n    console.log('[POST /api/expedientes] Verificando expediente existente...');\n    const [existing] = await conn.execute(\n      'SELECT expediente_id FROM expedientes WHERE paciente_id = ?',\n      [paciente_id]\n    );\n\n    if (existing.length > 0) {\n      console.log('[POST /api/expedientes] El paciente ya tiene un expediente');\n      await conn.end();\n      return NextResponse.json(\n        { error: 'El paciente ya tiene un expediente registrado' },\n        { status: 400 }\n      );\n    }\n\n    // Crear el expediente\n    console.log('[POST /api/expedientes] Creando expediente...');\n    const [result] = await conn.execute(\n      'INSERT INTO expedientes (paciente_id, notas_generales) VALUES (?, ?)',\n      [paciente_id, notas_generales]\n    );\n    console.log('[POST /api/expedientes] Expediente creado:', result);\n\n    await conn.end();\n    console.log('[POST /api/expedientes] Conexión cerrada');\n\n    return NextResponse.json({\n      message: 'Expediente creado exitosamente',\n      expediente_id: result.insertId\n    }, { status: 201 });\n  } catch (error) {\n    console.error('[POST /api/expedientes] Error:', error);\n    console.error('[POST /api/expedientes] Stack trace:', error.stack);\n    return NextResponse.json({ error: 'Error al crear expediente' }, { status: 500 });\n  }\n}\n\n// PUT - Actualizar un expediente\nexport async function PUT(request) {\n  console.log('[PUT /api/expedientes] Iniciando petición...');\n  try {\n    const data = await request.json();\n    console.log('[PUT /api/expedientes] Datos recibidos:', data);\n\n    const { expediente_id, notas_generales } = data;\n\n    console.log('[PUT /api/expedientes] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[PUT /api/expedientes] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[PUT /api/expedientes] current_user_id asignado');\n\n    // Verificar si el expediente existe\n    console.log('[PUT /api/expedientes] Verificando expediente...');\n    const [existing] = await conn.execute(\n      'SELECT expediente_id FROM expedientes WHERE expediente_id = ?',\n      [expediente_id]\n    );\n\n    if (!existing[0]) {\n      console.log('[PUT /api/expedientes] Expediente no encontrado');\n      await conn.end();\n      return NextResponse.json(\n        { error: 'Expediente no encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Actualizar el expediente\n    console.log('[PUT /api/expedientes] Actualizando expediente...');\n    await conn.execute(\n      'UPDATE expedientes SET notas_generales = ? WHERE expediente_id = ?',\n      [notas_generales, expediente_id]\n    );\n    console.log('[PUT /api/expedientes] Expediente actualizado');\n\n    await conn.end();\n    console.log('[PUT /api/expedientes] Conexión cerrada');\n\n    return NextResponse.json({ message: 'Expediente actualizado exitosamente' });\n  } catch (error) {\n    console.error('[PUT /api/expedientes] Error:', error);\n    console.error('[PUT /api/expedientes] Stack trace:', error.stack);\n    return NextResponse.json({ error: 'Error al actualizar expediente' }, { status: 500 });\n  }\n}\n\n// DELETE - Eliminar un expediente\nexport async function DELETE(request) {\n  console.log('[DELETE /api/expedientes] Iniciando petición...');\n  try {\n    const { searchParams } = new URL(request.url);\n    const expedienteId = searchParams.get('expedienteId');\n    console.log('[DELETE /api/expedientes] ID del expediente:', expedienteId);\n\n    if (!expedienteId) {\n      console.log('[DELETE /api/expedientes] ID de expediente no proporcionado');\n      return NextResponse.json(\n        { error: 'ID de expediente requerido' },\n        { status: 400 }\n      );\n    }\n\n    console.log('[DELETE /api/expedientes] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[DELETE /api/expedientes] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[DELETE /api/expedientes] current_user_id asignado');\n\n    // Verificar si el expediente existe\n    console.log('[DELETE /api/expedientes] Verificando expediente...');\n    const [existing] = await conn.execute(\n      'SELECT expediente_id FROM expedientes WHERE expediente_id = ?',\n      [expedienteId]\n    );\n\n    if (!existing[0]) {\n      console.log('[DELETE /api/expedientes] Expediente no encontrado');\n      await conn.end();\n      return NextResponse.json(\n        { error: 'Expediente no encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Eliminar el expediente\n    console.log('[DELETE /api/expedientes] Eliminando expediente...');\n    await conn.execute(\n      'DELETE FROM expedientes WHERE expediente_id = ?',\n      [expedienteId]\n    );\n    console.log('[DELETE /api/expedientes] Expediente eliminado');\n\n    await conn.end();\n    console.log('[DELETE /api/expedientes] Conexión cerrada');\n\n    return NextResponse.json({ message: 'Expediente eliminado exitosamente' });\n  } catch (error) {\n    console.error('[DELETE /api/expedientes] Error:', error);\n    console.error('[DELETE /api/expedientes] Stack trace:', error.stack);\n    return NextResponse.json({ error: 'Error al eliminar expediente' }, { status: 500 });\n  }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}