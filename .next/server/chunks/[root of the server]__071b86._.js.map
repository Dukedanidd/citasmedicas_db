{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/citas/doctor/%5BdoctorId%5D/%5Bfecha%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport mysql from 'mysql2/promise'\n\n// Configuración de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'clinica_db'\n}\n\n// Exportación nombrada para el método GET\nexport const GET = async (\n  request: Request,\n  { params }: { params: { doctorId: string; fecha: string } }\n) => {\n  console.log('[GET /api/citas/doctor/[doctorId]/[fecha]] Iniciando petición...')\n  let conn\n  try {\n    const { doctorId, fecha } = params\n    console.log('[GET /api/citas/doctor/[doctorId]/[fecha]] Parámetros:', { doctorId, fecha })\n\n    // Validar parámetros\n    if (!doctorId || !fecha) {\n      return NextResponse.json(\n        { error: 'Se requieren doctorId y fecha' },\n        { status: 400 }\n      )\n    }\n\n    // Validar formato de fecha (YYYY-MM-DD)\n    const fechaRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n    if (!fechaRegex.test(fecha)) {\n      return NextResponse.json(\n        { error: 'Formato de fecha inválido. Use YYYY-MM-DD' },\n        { status: 400 }\n      )\n    }\n\n    console.log('[GET /api/citas/doctor/[doctorId]/[fecha]] Conectando a la base de datos...')\n    conn = await mysql.createConnection(dbConfig)\n    console.log('[GET /api/citas/doctor/[doctorId]/[fecha]] Conexión exitosa')\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1')\n    console.log('[GET /api/citas/doctor/[doctorId]/[fecha]] current_user_id asignado')\n\n    // Consultar las citas del doctor en la fecha especificada\n    console.log('[GET /api/citas/doctor/[doctorId]/[fecha]] Ejecutando consulta...')\n    const [rows] = await conn.execute(\n      `SELECT c.*, \n              p.primer_nombre as paciente_nombre,\n              p.apellido_paterno as paciente_apellido,\n              e.nombre as estado_nombre,\n              TIME_FORMAT(c.fecha_hora, '%H:%i') as hora_cita\n       FROM citas c\n       JOIN usuarios p ON c.paciente_id = p.user_id\n       JOIN estado_citas e ON c.estado_id = e.estado_id\n       WHERE c.doctor_id = ? \n       AND DATE(c.fecha_hora) = ? \n       ORDER BY c.fecha_hora ASC`,\n      [doctorId, fecha]\n    )\n    console.log('[GET /api/citas/doctor/[doctorId]/[fecha]] Resultados:', rows)\n\n    // Agregar información del horario fijo\n    const response = {\n      citas: rows,\n      horario: {\n        hora_inicio: '08:00:00',\n        hora_fin: '20:00:00',\n        disponible: true\n      }\n    }\n\n    return NextResponse.json(response)\n  } catch (error) {\n    console.error('[GET /api/citas/doctor/[doctorId]/[fecha]] Error:', error)\n    console.error('[GET /api/citas/doctor/[doctorId]/[fecha]] Stack trace:', error.stack)\n    return NextResponse.json(\n      { error: 'Error al obtener las citas' },\n      { status: 500 }\n    )\n  } finally {\n    if (conn) {\n      await conn.end()\n      console.log('[GET /api/citas/doctor/[doctorId]/[fecha]] Conexión cerrada')\n    }\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,oCAAoC;AACpC,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAGO,MAAM,MAAM,OACjB,SACA,EAAE,MAAM,EAAmD;IAE3D,QAAQ,GAAG,CAAC;IACZ,IAAI;IACJ,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG;QAC5B,QAAQ,GAAG,CAAC,0DAA0D;YAAE;YAAU;QAAM;QAExF,qBAAqB;QACrB,IAAI,CAAC,YAAY,CAAC,OAAO;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,MAAM,aAAa;QACnB,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4C,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QACpC,QAAQ,GAAG,CAAC;QAEZ,4CAA4C;QAC5C,MAAM,KAAK,OAAO,CAAC;QACnB,QAAQ,GAAG,CAAC;QAEZ,0DAA0D;QAC1D,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAC/B,CAAC;;;;;;;;;;gCAUyB,CAAC,EAC3B;YAAC;YAAU;SAAM;QAEnB,QAAQ,GAAG,CAAC,0DAA0D;QAEtE,uCAAuC;QACvC,MAAM,WAAW;YACf,OAAO;YACP,SAAS;gBACP,aAAa;gBACb,UAAU;gBACV,YAAY;YACd;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qDAAqD;QACnE,QAAQ,KAAK,CAAC,2DAA2D,MAAM,KAAK;QACpF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,MAAM;YACR,MAAM,KAAK,GAAG;YACd,QAAQ,GAAG,CAAC;QACd;IACF;AACF"}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}