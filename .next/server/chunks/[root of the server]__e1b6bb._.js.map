{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/pacientes/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport mysql from \"mysql2/promise\";\n\n// Configuración de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || \"localhost\",\n  user: process.env.DB_USER || \"root\",\n  password: process.env.DB_PASSWORD || \"\",\n  database: process.env.DB_NAME || \"clinica_db\",\n};\n\n// GET - Obtener todos los pacientes o un paciente específico\nexport async function GET(request) {\n  console.log(\"[GET /api/pacientes] Iniciando petición...\");\n  let conn;\n  try {\n    const { searchParams } = new URL(request.url);\n    const pacienteId = searchParams.get(\"pacienteId\");\n    console.log(\"[GET /api/pacientes] ID del paciente:\", pacienteId);\n\n    console.log(\"[GET /api/pacientes] Conectando a la base de datos...\");\n    conn = await mysql.createConnection(dbConfig);\n    console.log(\"[GET /api/pacientes] Conexión exitosa\");\n\n    // Asignar current_user_id para los triggers usando el ID del paciente\n    await conn.execute(\"SET @current_user_id = 1\", [pacienteId || null]);\n    console.log(\"[GET /api/pacientes] current_user_id asignado:\", pacienteId);\n\n    if (pacienteId) {\n      console.log(\"[GET /api/pacientes] Obteniendo paciente específico...\");\n      const [rows] = await conn.execute(\n        `\n        SELECT \n          p.*,\n          u.primer_nombre,\n          u.segundo_nombre,\n          u.apellido_paterno,\n          u.apellido_materno,\n          u.email,\n          m.especialidad as doctor_especialidad\n        FROM pacientes p\n        JOIN usuarios u ON p.paciente_id = u.user_id\n        LEFT JOIN medicos m ON p.doctor_id = m.doctor_id\n        WHERE p.paciente_id = ?\n      `,\n        [pacienteId],\n      );\n      console.log(\"[GET /api/pacientes] Resultados:\", rows);\n\n      if (!rows[0]) {\n        console.log(\"[GET /api/pacientes] Paciente no encontrado\");\n        return NextResponse.json(\n          { error: \"Paciente no encontrado\" },\n          { status: 404 },\n        );\n      }\n\n      return NextResponse.json(rows[0]);\n    }\n\n    console.log(\"[GET /api/pacientes] Obteniendo todos los pacientes...\");\n    const [rows] = await conn.execute(`\n      SELECT \n        p.*,\n        u.primer_nombre,\n        u.segundo_nombre,\n        u.apellido_paterno,\n        u.apellido_materno,\n        u.email,\n        m.especialidad as doctor_especialidad\n      FROM pacientes p\n      JOIN usuarios u ON p.paciente_id = u.user_id\n      LEFT JOIN medicos m ON p.doctor_id = m.doctor_id\n    `);\n    console.log(\"[GET /api/pacientes] Resultados:\", rows);\n\n    return NextResponse.json(rows);\n  } catch (error) {\n    console.error(\"[GET /api/pacientes] Error:\", error);\n    console.error(\"[GET /api/pacientes] Stack trace:\", error.stack);\n    return NextResponse.json(\n      { error: \"Error al obtener pacientes\" },\n      { status: 500 },\n    );\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log(\"[GET /api/pacientes] Conexión cerrada\");\n    }\n  }\n}\n\n// POST - Crear un nuevo paciente\nexport async function POST(request) {\n  console.log(\"[POST /api/pacientes] Iniciando petición...\");\n  let conn;\n  try {\n    const data = await request.json();\n    console.log(\"[POST /api/pacientes] Datos recibidos:\", {\n      ...data,\n      password: \"***\",\n    });\n\n    const {\n      primer_nombre,\n      segundo_nombre,\n      apellido_paterno,\n      apellido_materno,\n      email,\n      password,\n      fecha_nacimiento,\n      sexo,\n      doctor_id,\n    } = data;\n\n    if (\n      !primer_nombre ||\n      !apellido_paterno ||\n      !email ||\n      !password ||\n      !fecha_nacimiento ||\n      !sexo ||\n      !doctor_id\n    ) {\n      return NextResponse.json(\n        { error: \"Faltan campos requeridos\" },\n        { status: 400 },\n      );\n    }\n\n    console.log(\"[POST /api/pacientes] Conectando a la base de datos...\");\n    conn = await mysql.createConnection(dbConfig);\n    console.log(\"[POST /api/pacientes] Conexión exitosa\");\n\n    // Iniciar transacción\n    await conn.beginTransaction();\n    console.log(\"[POST /api/pacientes] Transacción iniciada\");\n\n    // Asignar current_user_id para los triggers\n    const userId = request.headers.get(\"x-user-id\");\n    await conn.execute(\"SET @current_user_id = 1\", [userId]);\n    console.log(\"[POST /api/pacientes] current_user_id asignado\");\n\n    // Obtener el role_id para pacientes\n    console.log(\"[POST /api/pacientes] Obteniendo role_id para pacientes...\");\n    const [roles] = await conn.execute(\n      \"SELECT role_id FROM roles WHERE nombre = ?\",\n      [\"paciente\"],\n    );\n\n    if (!roles[0]) {\n      await conn.rollback();\n      console.log(\"[POST /api/pacientes] No se encontró el rol de paciente\");\n      return NextResponse.json(\n        { error: \"No se encontró el rol de paciente en la base de datos\" },\n        { status: 500 },\n      );\n    }\n\n    const role_id = roles[0].role_id;\n    console.log(\"[POST /api/pacientes] Role_id obtenido:\", role_id);\n\n    // Verificar si el email ya existe\n    console.log(\"[POST /api/pacientes] Verificando email...\");\n    const [existingUser] = await conn.execute(\n      \"SELECT user_id FROM usuarios WHERE email = ?\",\n      [email],\n    );\n\n    if (existingUser[0]) {\n      await conn.rollback();\n      console.log(\"[POST /api/pacientes] Email ya existe\");\n      return NextResponse.json(\n        { error: \"El email ya está registrado\" },\n        { status: 400 },\n      );\n    }\n\n    // Verificar si el doctor existe\n    console.log(\"[POST /api/pacientes] Verificando doctor...\");\n    const [doctor] = await conn.execute(\n      \"SELECT doctor_id FROM medicos WHERE doctor_id = ?\",\n      [doctor_id],\n    );\n\n    if (!doctor[0]) {\n      await conn.rollback();\n      console.log(\"[POST /api/pacientes] Doctor no encontrado\");\n      return NextResponse.json(\n        { error: \"El doctor especificado no existe\" },\n        { status: 400 },\n      );\n    }\n\n    // Insertar usuario\n    console.log(\"[POST /api/pacientes] Creando usuario...\");\n    const [userResult] = await conn.execute(\n      `\n      INSERT INTO usuarios (\n        primer_nombre, segundo_nombre, apellido_paterno, apellido_materno,\n        email, password, role_id\n      ) VALUES (?, ?, ?, ?, ?, ?, ?)\n    `,\n      [\n        primer_nombre,\n        segundo_nombre || null,\n        apellido_paterno,\n        apellido_materno || null,\n        email,\n        password,\n        role_id,\n      ],\n    );\n\n    const paciente_id = userResult.insertId;\n    console.log(\"[POST /api/pacientes] Usuario creado con ID:\", paciente_id);\n\n    // Insertar paciente\n    console.log(\"[POST /api/pacientes] Creando paciente...\");\n    await conn.execute(\n      `\n      INSERT INTO pacientes (paciente_id, fecha_nacimiento, sexo, doctor_id)\n      VALUES (?, ?, ?, ?)\n    `,\n      [paciente_id, fecha_nacimiento, sexo, doctor_id],\n    );\n\n    await conn.commit();\n    console.log(\"[POST /api/pacientes] Transacción completada\");\n\n    // Obtener los datos completos del paciente recién creado\n    const [newPatientData] = await conn.execute(`\n      SELECT \n        p.*,\n        u.primer_nombre,\n        u.segundo_nombre,\n        u.apellido_paterno,\n        u.apellido_materno,\n        u.email,\n        m.especialidad as doctor_especialidad\n      FROM pacientes p\n      JOIN usuarios u ON p.paciente_id = u.user_id\n      LEFT JOIN medicos m ON p.doctor_id = m.doctor_id\n      WHERE p.paciente_id = ?\n    `, [paciente_id]);\n\n    return NextResponse.json(newPatientData[0], { status: 201 });\n  } catch (error) {\n    console.error(\"[POST /api/pacientes] Error:\", error);\n    console.error(\"[POST /api/pacientes] Stack trace:\", error.stack);\n    if (conn) {\n      await conn.rollback();\n      console.log(\"[POST /api/pacientes] Transacción revertida\");\n    }\n    return NextResponse.json(\n      { error: \"Error al crear paciente\" },\n      { status: 500 },\n    );\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log(\"[POST /api/pacientes] Conexión cerrada\");\n    }\n  }\n}\n\n// PUT - Actualizar un paciente\nexport async function PUT(request) {\n  console.log(\"[PUT /api/pacientes] Iniciando petición...\");\n  let conn;\n  try {\n    const data = await request.json();\n    console.log(\"[PUT /api/pacientes] Datos recibidos:\", data);\n\n    const {\n      paciente_id,\n      primer_nombre,\n      segundo_nombre,\n      apellido_paterno,\n      apellido_materno,\n      email,\n      fecha_nacimiento,\n      sexo,\n      doctor_id,\n    } = data;\n\n    if (!paciente_id) {\n      return NextResponse.json(\n        { error: \"ID de paciente requerido\" },\n        { status: 400 },\n      );\n    }\n\n    console.log(\"[PUT /api/pacientes] Conectando a la base de datos...\");\n    conn = await mysql.createConnection(dbConfig);\n    console.log(\"[PUT /api/pacientes] Conexión exitosa\");\n\n    // Iniciar transacción\n    await conn.beginTransaction();\n    console.log(\"[PUT /api/pacientes] Transacción iniciada\");\n\n    // Asignar current_user_id para los triggers\n    //const userId = request.headers.get(\"x-user-id\");\n    await conn.execute(\"SET @current_user_id = 1\");\n    console.log(\"[PUT /api/pacientes] current_user_id asignado\");\n\n    // Verificar si el paciente existe\n    console.log(\"[PUT /api/pacientes] Verificando paciente...\");\n    const [paciente] = await conn.execute(\n      \"SELECT paciente_id FROM pacientes WHERE paciente_id = ?\",\n      [paciente_id],\n    );\n\n    if (!paciente[0]) {\n      await conn.rollback();\n      console.log(\"[PUT /api/pacientes] Paciente no encontrado\");\n      return NextResponse.json(\n        { error: \"Paciente no encontrado\" },\n        { status: 404 },\n      );\n    }\n\n    // Verificar si el doctor existe si se está actualizando\n    if (doctor_id) {\n      console.log(\"[PUT /api/pacientes] Verificando doctor...\");\n      const [doctor] = await conn.execute(\n        \"SELECT doctor_id FROM medicos WHERE doctor_id = ?\",\n        [doctor_id],\n      );\n\n      if (!doctor[0]) {\n        await conn.rollback();\n        console.log(\"[PUT /api/pacientes] Doctor no encontrado\");\n        return NextResponse.json(\n          { error: \"El doctor especificado no existe\" },\n          { status: 400 },\n        );\n      }\n    }\n\n    // Actualizar usuario\n    console.log(\"[PUT /api/pacientes] Actualizando usuario...\");\n    await conn.execute(\n      `\n      UPDATE usuarios\n      SET primer_nombre = ?,\n          segundo_nombre = ?,\n          apellido_paterno = ?,\n          apellido_materno = ?,\n          email = ?\n      WHERE user_id = ?\n    `,\n      [\n        primer_nombre,\n        segundo_nombre || null,\n        apellido_paterno,\n        apellido_materno || null,\n        email,\n        paciente_id,\n      ],\n    );\n\n    // Actualizar paciente\n    console.log(\"[PUT /api/pacientes] Actualizando paciente...\");\n    await conn.execute(\n      `\n      UPDATE pacientes\n      SET fecha_nacimiento = ?,\n          sexo = ?,\n          doctor_id = ?\n      WHERE paciente_id = ?\n    `,\n      [fecha_nacimiento, sexo, doctor_id, paciente_id],\n    );\n\n    await conn.commit();\n    console.log(\"[PUT /api/pacientes] Transacción completada\");\n\n    // Obtener los datos completos del paciente actualizado\n    const [updatedPatientData] = await conn.execute(`\n      SELECT \n        p.*,\n        u.primer_nombre,\n        u.segundo_nombre,\n        u.apellido_paterno,\n        u.apellido_materno,\n        u.email,\n        m.especialidad as doctor_especialidad\n      FROM pacientes p\n      JOIN usuarios u ON p.paciente_id = u.user_id\n      LEFT JOIN medicos m ON p.doctor_id = m.doctor_id\n      WHERE p.paciente_id = ?\n    `, [paciente_id]);\n\n    return NextResponse.json(updatedPatientData[0]);\n  } catch (error) {\n    console.error(\"[PUT /api/pacientes] Error:\", error);\n    console.error(\"[PUT /api/pacientes] Stack trace:\", error.stack);\n    if (conn) {\n      await conn.rollback();\n      console.log(\"[PUT /api/pacientes] Transacción revertida\");\n    }\n    return NextResponse.json(\n      { error: \"Error al actualizar paciente\" },\n      { status: 500 },\n    );\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log(\"[PUT /api/pacientes] Conexión cerrada\");\n    }\n  }\n}\n\n// DELETE - Eliminar un paciente\nexport async function DELETE(request) {\n  console.log(\"[DELETE /api/pacientes] Iniciando petición...\");\n  let conn;\n  try {\n    const { searchParams } = new URL(request.url);\n    const pacienteId = searchParams.get(\"pacienteId\");\n    console.log(\"[DELETE /api/pacientes] ID del paciente:\", pacienteId);\n\n    if (!pacienteId) {\n      return NextResponse.json(\n        { error: \"Se requiere el ID del paciente\" },\n        { status: 400 },\n      );\n    }\n\n    console.log(\"[DELETE /api/pacientes] Conectando a la base de datos...\");\n    conn = await mysql.createConnection(dbConfig);\n    console.log(\"[DELETE /api/pacientes] Conexión exitosa\");\n\n    // Asignar current_user_id para los triggers\n    //const userId = request.headers.get(\"x-user-id\");\n    await conn.execute(\"SET @current_user_id = 1\");\n    console.log(\"[DELETE /api/pacientes] current_user_id asignado\");\n\n    // Iniciar transacción\n    await conn.beginTransaction();\n    console.log(\"[DELETE /api/pacientes] Transacción iniciada\");\n\n    // Verificar si el paciente existe\n    const [paciente] = await conn.execute(\n      \"SELECT paciente_id FROM pacientes WHERE paciente_id = ?\",\n      [pacienteId],\n    );\n\n    if (!paciente[0]) {\n      await conn.rollback();\n      console.log(\"[DELETE /api/pacientes] Paciente no encontrado\");\n      return NextResponse.json(\n        { error: \"Paciente no encontrado\" },\n        { status: 404 },\n      );\n    }\n\n    // Eliminar registros relacionados en orden\n    console.log(\"[DELETE /api/pacientes] Eliminando registros relacionados...\");\n\n    // 1. Eliminar alergias\n    await conn.execute(\n      \"DELETE FROM alergias WHERE expediente_id IN (SELECT expediente_id FROM expedientes WHERE paciente_id = ?)\",\n      [pacienteId],\n    );\n    console.log(\"[DELETE /api/pacientes] Alergias eliminadas\");\n\n    // 2. Eliminar historial médico\n    await conn.execute(\n      \"DELETE FROM historial_medico WHERE expediente_id IN (SELECT expediente_id FROM expedientes WHERE paciente_id = ?)\",\n      [pacienteId],\n    );\n    console.log(\"[DELETE /api/pacientes] Historial médico eliminado\");\n\n    // 3. Eliminar expedientes\n    await conn.execute(\"DELETE FROM expedientes WHERE paciente_id = ?\", [\n      pacienteId,\n    ]);\n    console.log(\"[DELETE /api/pacientes] Expedientes eliminados\");\n\n    // 4. Eliminar citas\n    await conn.execute(\"DELETE FROM citas WHERE paciente_id = ?\", [pacienteId]);\n    console.log(\"[DELETE /api/pacientes] Citas eliminadas\");\n\n    // 5. Eliminar el paciente\n    await conn.execute(\"DELETE FROM pacientes WHERE paciente_id = ?\", [\n      pacienteId,\n    ]);\n    console.log(\"[DELETE /api/pacientes] Paciente eliminado\");\n\n    // 6. Eliminar el usuario asociado\n    await conn.execute(\"DELETE FROM usuarios WHERE user_id = ?\", [pacienteId]);\n    console.log(\"[DELETE /api/pacientes] Usuario eliminado\");\n\n    await conn.commit();\n    console.log(\"[DELETE /api/pacientes] Transacción completada\");\n\n    return NextResponse.json({\n      message: \"Paciente eliminado exitosamente\",\n    });\n  } catch (error) {\n    if (conn) {\n      await conn.rollback();\n      console.log(\"[DELETE /api/pacientes] Transacción revertida\");\n    }\n    console.error(\"[DELETE /api/pacientes] Error:\", error);\n    console.error(\"[DELETE /api/pacientes] Stack trace:\", error.stack);\n    return NextResponse.json(\n      { error: \"Error al eliminar el paciente\" },\n      { status: 500 },\n    );\n  } finally {\n    if (conn) {\n      await conn.end();\n      console.log(\"[DELETE /api/pacientes] Conexión cerrada\");\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 604, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}