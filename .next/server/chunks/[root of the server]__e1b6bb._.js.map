{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/arman/ISC/citasmedicas_db/app/api/pacientes/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport mysql from \"mysql2/promise\";\r\n\r\n// Configuración de la base de datos\r\nconst dbConfig = {\r\n  host: process.env.DB_HOST || \"localhost\",\r\n  user: process.env.DB_USER || \"root\",\r\n  password: process.env.DB_PASSWORD || \"\",\r\n  database: process.env.DB_NAME || \"clinica_db\",\r\n};\r\n\r\n// GET - Obtener todos los pacientes o un paciente específico\r\nexport async function GET(request) {\r\n  console.log(\"[GET /api/pacientes] Iniciando petición...\");\r\n  let conn;\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const pacienteId = searchParams.get(\"pacienteId\");\r\n    console.log(\"[GET /api/pacientes] ID del paciente:\", pacienteId);\r\n\r\n    console.log(\"[GET /api/pacientes] Conectando a la base de datos...\");\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log(\"[GET /api/pacientes] Conexión exitosa\");\r\n\r\n    // Asignar current_user_id para los triggers usando el ID del paciente\r\n    await conn.execute(\"SET @current_user_id = 1\", [pacienteId || null]);\r\n    console.log(\"[GET /api/pacientes] current_user_id asignado:\", pacienteId);\r\n\r\n    if (pacienteId) {\r\n      console.log(\"[GET /api/pacientes] Obteniendo paciente específico...\");\r\n      const [rows] = await conn.execute(\r\n        `\r\n        SELECT \r\n          p.*,\r\n          u.primer_nombre,\r\n          u.segundo_nombre,\r\n          u.apellido_paterno,\r\n          u.apellido_materno,\r\n          u.email,\r\n          m.especialidad as doctor_especialidad\r\n        FROM pacientes p\r\n        JOIN usuarios u ON p.paciente_id = u.user_id\r\n        LEFT JOIN medicos m ON p.doctor_id = m.doctor_id\r\n        WHERE p.paciente_id = ?\r\n      `,\r\n        [pacienteId],\r\n      );\r\n      console.log(\"[GET /api/pacientes] Resultados:\", rows);\r\n\r\n      if (!rows[0]) {\r\n        console.log(\"[GET /api/pacientes] Paciente no encontrado\");\r\n        return NextResponse.json(\r\n          { error: \"Paciente no encontrado\" },\r\n          { status: 404 },\r\n        );\r\n      }\r\n\r\n      return NextResponse.json(rows[0]);\r\n    }\r\n\r\n    console.log(\"[GET /api/pacientes] Obteniendo todos los pacientes...\");\r\n    const [rows] = await conn.execute(`\r\n      SELECT \r\n        p.*,\r\n        u.primer_nombre,\r\n        u.segundo_nombre,\r\n        u.apellido_paterno,\r\n        u.apellido_materno,\r\n        u.email,\r\n        m.especialidad as doctor_especialidad\r\n      FROM pacientes p\r\n      JOIN usuarios u ON p.paciente_id = u.user_id\r\n      LEFT JOIN medicos m ON p.doctor_id = m.doctor_id\r\n    `);\r\n    console.log(\"[GET /api/pacientes] Resultados:\", rows);\r\n\r\n    return NextResponse.json(rows);\r\n  } catch (error) {\r\n    console.error(\"[GET /api/pacientes] Error:\", error);\r\n    console.error(\"[GET /api/pacientes] Stack trace:\", error.stack);\r\n    return NextResponse.json(\r\n      { error: \"Error al obtener pacientes\" },\r\n      { status: 500 },\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log(\"[GET /api/pacientes] Conexión cerrada\");\r\n    }\r\n  }\r\n}\r\n\r\n// POST - Crear un nuevo paciente\r\nexport async function POST(request) {\r\n  console.log(\"[POST /api/pacientes] Iniciando petición...\");\r\n  let conn;\r\n  try {\r\n    const data = await request.json();\r\n    console.log(\"[POST /api/pacientes] Datos recibidos:\", {\r\n      ...data,\r\n      password: \"***\",\r\n    });\r\n\r\n    const {\r\n      primer_nombre,\r\n      segundo_nombre,\r\n      apellido_paterno,\r\n      apellido_materno,\r\n      email,\r\n      password,\r\n      fecha_nacimiento,\r\n      sexo,\r\n      doctor_id,\r\n    } = data;\r\n\r\n    if (\r\n      !primer_nombre ||\r\n      !apellido_paterno ||\r\n      !email ||\r\n      !password ||\r\n      !fecha_nacimiento ||\r\n      !sexo ||\r\n      !doctor_id\r\n    ) {\r\n      return NextResponse.json(\r\n        { error: \"Faltan campos requeridos\" },\r\n        { status: 400 },\r\n      );\r\n    }\r\n\r\n    console.log(\"[POST /api/pacientes] Conectando a la base de datos...\");\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log(\"[POST /api/pacientes] Conexión exitosa\");\r\n\r\n    // Iniciar transacción\r\n    await conn.beginTransaction();\r\n    console.log(\"[POST /api/pacientes] Transacción iniciada\");\r\n\r\n    // Asignar current_user_id para los triggers\r\n    const userId = request.headers.get(\"x-user-id\");\r\n    await conn.execute(\"SET @current_user_id = 1\", [userId]);\r\n    console.log(\"[POST /api/pacientes] current_user_id asignado\");\r\n\r\n    // Obtener el role_id para pacientes\r\n    console.log(\"[POST /api/pacientes] Obteniendo role_id para pacientes...\");\r\n    const [roles] = await conn.execute(\r\n      \"SELECT role_id FROM roles WHERE nombre = ?\",\r\n      [\"paciente\"],\r\n    );\r\n\r\n    if (!roles[0]) {\r\n      await conn.rollback();\r\n      console.log(\"[POST /api/pacientes] No se encontró el rol de paciente\");\r\n      return NextResponse.json(\r\n        { error: \"No se encontró el rol de paciente en la base de datos\" },\r\n        { status: 500 },\r\n      );\r\n    }\r\n\r\n    const role_id = roles[0].role_id;\r\n    console.log(\"[POST /api/pacientes] Role_id obtenido:\", role_id);\r\n\r\n    // Verificar si el email ya existe\r\n    console.log(\"[POST /api/pacientes] Verificando email...\");\r\n    const [existingUser] = await conn.execute(\r\n      \"SELECT user_id FROM usuarios WHERE email = ?\",\r\n      [email],\r\n    );\r\n\r\n    if (existingUser[0]) {\r\n      await conn.rollback();\r\n      console.log(\"[POST /api/pacientes] Email ya existe\");\r\n      return NextResponse.json(\r\n        { error: \"El email ya está registrado\" },\r\n        { status: 400 },\r\n      );\r\n    }\r\n\r\n    // Verificar si el doctor existe\r\n    console.log(\"[POST /api/pacientes] Verificando doctor...\");\r\n    const [doctor] = await conn.execute(\r\n      \"SELECT doctor_id FROM medicos WHERE doctor_id = ?\",\r\n      [doctor_id],\r\n    );\r\n\r\n    if (!doctor[0]) {\r\n      await conn.rollback();\r\n      console.log(\"[POST /api/pacientes] Doctor no encontrado\");\r\n      return NextResponse.json(\r\n        { error: \"El doctor especificado no existe\" },\r\n        { status: 400 },\r\n      );\r\n    }\r\n\r\n    // Insertar usuario\r\n    console.log(\"[POST /api/pacientes] Creando usuario...\");\r\n    const [userResult] = await conn.execute(\r\n      `\r\n      INSERT INTO usuarios (\r\n        primer_nombre, segundo_nombre, apellido_paterno, apellido_materno,\r\n        email, password, role_id\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?)\r\n    `,\r\n      [\r\n        primer_nombre,\r\n        segundo_nombre || null,\r\n        apellido_paterno,\r\n        apellido_materno || null,\r\n        email,\r\n        password,\r\n        role_id,\r\n      ],\r\n    );\r\n\r\n    const paciente_id = userResult.insertId;\r\n    console.log(\"[POST /api/pacientes] Usuario creado con ID:\", paciente_id);\r\n\r\n    // Insertar paciente\r\n    console.log(\"[POST /api/pacientes] Creando paciente...\");\r\n    await conn.execute(\r\n      `\r\n      INSERT INTO pacientes (paciente_id, fecha_nacimiento, sexo, doctor_id)\r\n      VALUES (?, ?, ?, ?)\r\n    `,\r\n      [paciente_id, fecha_nacimiento, sexo, doctor_id],\r\n    );\r\n\r\n    await conn.commit();\r\n    console.log(\"[POST /api/pacientes] Transacción completada\");\r\n\r\n    // Obtener los datos completos del paciente recién creado\r\n    const [newPatientData] = await conn.execute(`\r\n      SELECT \r\n        p.*,\r\n        u.primer_nombre,\r\n        u.segundo_nombre,\r\n        u.apellido_paterno,\r\n        u.apellido_materno,\r\n        u.email,\r\n        m.especialidad as doctor_especialidad\r\n      FROM pacientes p\r\n      JOIN usuarios u ON p.paciente_id = u.user_id\r\n      LEFT JOIN medicos m ON p.doctor_id = m.doctor_id\r\n      WHERE p.paciente_id = ?\r\n    `, [paciente_id]);\r\n\r\n    return NextResponse.json(newPatientData[0], { status: 201 });\r\n  } catch (error) {\r\n    console.error(\"[POST /api/pacientes] Error:\", error);\r\n    console.error(\"[POST /api/pacientes] Stack trace:\", error.stack);\r\n    if (conn) {\r\n      await conn.rollback();\r\n      console.log(\"[POST /api/pacientes] Transacción revertida\");\r\n    }\r\n    return NextResponse.json(\r\n      { error: \"Error al crear paciente\" },\r\n      { status: 500 },\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log(\"[POST /api/pacientes] Conexión cerrada\");\r\n    }\r\n  }\r\n}\r\n\r\n// PUT - Actualizar un paciente\r\nexport async function PUT(request) {\r\n  console.log(\"[PUT /api/pacientes] Iniciando petición...\");\r\n  let conn;\r\n  try {\r\n    const data = await request.json();\r\n    console.log(\"[PUT /api/pacientes] Datos recibidos:\", data);\r\n\r\n    const {\r\n      paciente_id,\r\n      primer_nombre,\r\n      segundo_nombre,\r\n      apellido_paterno,\r\n      apellido_materno,\r\n      email,\r\n      fecha_nacimiento,\r\n      sexo,\r\n      doctor_id,\r\n    } = data;\r\n\r\n    if (!paciente_id) {\r\n      return NextResponse.json(\r\n        { error: \"ID de paciente requerido\" },\r\n        { status: 400 },\r\n      );\r\n    }\r\n\r\n    console.log(\"[PUT /api/pacientes] Conectando a la base de datos...\");\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log(\"[PUT /api/pacientes] Conexión exitosa\");\r\n\r\n    // Iniciar transacción\r\n    await conn.beginTransaction();\r\n    console.log(\"[PUT /api/pacientes] Transacción iniciada\");\r\n\r\n    // Asignar current_user_id para los triggers\r\n    //const userId = request.headers.get(\"x-user-id\");\r\n    await conn.execute(\"SET @current_user_id = 1\");\r\n    console.log(\"[PUT /api/pacientes] current_user_id asignado\");\r\n\r\n    // Verificar si el paciente existe\r\n    console.log(\"[PUT /api/pacientes] Verificando paciente...\");\r\n    const [paciente] = await conn.execute(\r\n      \"SELECT paciente_id FROM pacientes WHERE paciente_id = ?\",\r\n      [paciente_id],\r\n    );\r\n\r\n    if (!paciente[0]) {\r\n      await conn.rollback();\r\n      console.log(\"[PUT /api/pacientes] Paciente no encontrado\");\r\n      return NextResponse.json(\r\n        { error: \"Paciente no encontrado\" },\r\n        { status: 404 },\r\n      );\r\n    }\r\n\r\n    // Verificar si el doctor existe si se está actualizando\r\n    if (doctor_id) {\r\n      console.log(\"[PUT /api/pacientes] Verificando doctor...\");\r\n      const [doctor] = await conn.execute(\r\n        \"SELECT doctor_id FROM medicos WHERE doctor_id = ?\",\r\n        [doctor_id],\r\n      );\r\n\r\n      if (!doctor[0]) {\r\n        await conn.rollback();\r\n        console.log(\"[PUT /api/pacientes] Doctor no encontrado\");\r\n        return NextResponse.json(\r\n          { error: \"El doctor especificado no existe\" },\r\n          { status: 400 },\r\n        );\r\n      }\r\n    }\r\n\r\n    // Actualizar usuario\r\n    console.log(\"[PUT /api/pacientes] Actualizando usuario...\");\r\n    await conn.execute(\r\n      `\r\n      UPDATE usuarios\r\n      SET primer_nombre = ?,\r\n          segundo_nombre = ?,\r\n          apellido_paterno = ?,\r\n          apellido_materno = ?,\r\n          email = ?\r\n      WHERE user_id = ?\r\n    `,\r\n      [\r\n        primer_nombre,\r\n        segundo_nombre || null,\r\n        apellido_paterno,\r\n        apellido_materno || null,\r\n        email,\r\n        paciente_id,\r\n      ],\r\n    );\r\n\r\n    // Actualizar paciente\r\n    console.log(\"[PUT /api/pacientes] Actualizando paciente...\");\r\n    await conn.execute(\r\n      `\r\n      UPDATE pacientes\r\n      SET fecha_nacimiento = ?,\r\n          sexo = ?,\r\n          doctor_id = ?\r\n      WHERE paciente_id = ?\r\n    `,\r\n      [fecha_nacimiento, sexo, doctor_id, paciente_id],\r\n    );\r\n\r\n    await conn.commit();\r\n    console.log(\"[PUT /api/pacientes] Transacción completada\");\r\n\r\n    // Obtener los datos completos del paciente actualizado\r\n    const [updatedPatientData] = await conn.execute(`\r\n      SELECT \r\n        p.*,\r\n        u.primer_nombre,\r\n        u.segundo_nombre,\r\n        u.apellido_paterno,\r\n        u.apellido_materno,\r\n        u.email,\r\n        m.especialidad as doctor_especialidad\r\n      FROM pacientes p\r\n      JOIN usuarios u ON p.paciente_id = u.user_id\r\n      LEFT JOIN medicos m ON p.doctor_id = m.doctor_id\r\n      WHERE p.paciente_id = ?\r\n    `, [paciente_id]);\r\n\r\n    return NextResponse.json(updatedPatientData[0]);\r\n  } catch (error) {\r\n    console.error(\"[PUT /api/pacientes] Error:\", error);\r\n    console.error(\"[PUT /api/pacientes] Stack trace:\", error.stack);\r\n    if (conn) {\r\n      await conn.rollback();\r\n      console.log(\"[PUT /api/pacientes] Transacción revertida\");\r\n    }\r\n    return NextResponse.json(\r\n      { error: \"Error al actualizar paciente\" },\r\n      { status: 500 },\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log(\"[PUT /api/pacientes] Conexión cerrada\");\r\n    }\r\n  }\r\n}\r\n\r\n// DELETE - Eliminar un paciente\r\nexport async function DELETE(request) {\r\n  console.log(\"[DELETE /api/pacientes] Iniciando petición...\");\r\n  let conn;\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const pacienteId = searchParams.get(\"pacienteId\");\r\n    console.log(\"[DELETE /api/pacientes] ID del paciente:\", pacienteId);\r\n\r\n    if (!pacienteId) {\r\n      return NextResponse.json(\r\n        { error: \"Se requiere el ID del paciente\" },\r\n        { status: 400 },\r\n      );\r\n    }\r\n\r\n    console.log(\"[DELETE /api/pacientes] Conectando a la base de datos...\");\r\n    conn = await mysql.createConnection(dbConfig);\r\n    console.log(\"[DELETE /api/pacientes] Conexión exitosa\");\r\n\r\n    // Asignar current_user_id para los triggers\r\n    //const userId = request.headers.get(\"x-user-id\");\r\n    await conn.execute(\"SET @current_user_id = 1\");\r\n    console.log(\"[DELETE /api/pacientes] current_user_id asignado\");\r\n\r\n    // Iniciar transacción\r\n    await conn.beginTransaction();\r\n    console.log(\"[DELETE /api/pacientes] Transacción iniciada\");\r\n\r\n    // Verificar si el paciente existe\r\n    const [paciente] = await conn.execute(\r\n      \"SELECT paciente_id FROM pacientes WHERE paciente_id = ?\",\r\n      [pacienteId],\r\n    );\r\n\r\n    if (!paciente[0]) {\r\n      await conn.rollback();\r\n      console.log(\"[DELETE /api/pacientes] Paciente no encontrado\");\r\n      return NextResponse.json(\r\n        { error: \"Paciente no encontrado\" },\r\n        { status: 404 },\r\n      );\r\n    }\r\n\r\n    // Eliminar registros relacionados en orden\r\n    console.log(\"[DELETE /api/pacientes] Eliminando registros relacionados...\");\r\n\r\n    // 1. Eliminar alergias\r\n    await conn.execute(\r\n      \"DELETE FROM alergias WHERE expediente_id IN (SELECT expediente_id FROM expedientes WHERE paciente_id = ?)\",\r\n      [pacienteId],\r\n    );\r\n    console.log(\"[DELETE /api/pacientes] Alergias eliminadas\");\r\n\r\n    // 2. Eliminar historial médico\r\n    await conn.execute(\r\n      \"DELETE FROM historial_medico WHERE expediente_id IN (SELECT expediente_id FROM expedientes WHERE paciente_id = ?)\",\r\n      [pacienteId],\r\n    );\r\n    console.log(\"[DELETE /api/pacientes] Historial médico eliminado\");\r\n\r\n    // 3. Eliminar expedientes\r\n    await conn.execute(\"DELETE FROM expedientes WHERE paciente_id = ?\", [\r\n      pacienteId,\r\n    ]);\r\n    console.log(\"[DELETE /api/pacientes] Expedientes eliminados\");\r\n\r\n    // 4. Eliminar citas\r\n    await conn.execute(\"DELETE FROM citas WHERE paciente_id = ?\", [pacienteId]);\r\n    console.log(\"[DELETE /api/pacientes] Citas eliminadas\");\r\n\r\n    // 5. Eliminar el paciente\r\n    await conn.execute(\"DELETE FROM pacientes WHERE paciente_id = ?\", [\r\n      pacienteId,\r\n    ]);\r\n    console.log(\"[DELETE /api/pacientes] Paciente eliminado\");\r\n\r\n    // 6. Eliminar el usuario asociado\r\n    await conn.execute(\"DELETE FROM usuarios WHERE user_id = ?\", [pacienteId]);\r\n    console.log(\"[DELETE /api/pacientes] Usuario eliminado\");\r\n\r\n    await conn.commit();\r\n    console.log(\"[DELETE /api/pacientes] Transacción completada\");\r\n\r\n    return NextResponse.json({\r\n      message: \"Paciente eliminado exitosamente\",\r\n    });\r\n  } catch (error) {\r\n    if (conn) {\r\n      await conn.rollback();\r\n      console.log(\"[DELETE /api/pacientes] Transacción revertida\");\r\n    }\r\n    console.error(\"[DELETE /api/pacientes] Error:\", error);\r\n    console.error(\"[DELETE /api/pacientes] Stack trace:\", error.stack);\r\n    return NextResponse.json(\r\n      { error: \"Error al eliminar el paciente\" },\r\n      { status: 500 },\r\n    );\r\n  } finally {\r\n    if (conn) {\r\n      await conn.end();\r\n      console.log(\"[DELETE /api/pacientes] Conexión cerrada\");\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 604, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}