{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/database/connection.js"],"sourcesContent":["const mysql = require('mysql2');\n\n// Configuración de la conexión\nconst connection = mysql.createConnection({\n    host: 'localhost',      // Host de la base de datos\n    port: 3306,\n    user: 'clinica-admin',          // Usuario de MySQL\n    password: 'admin',          // Contraseña de MySQL\n    database: 'clinca_db' // Nombre de la base de datos\n});\n\n// Probar la conexión\nconnection.connect((err) => {\n    if (err) {\n        console.error('Error al conectar a la base de datos:', err);\n        return;\n    }\n    console.log('Conexión exitosa a la base de datos MySQL');\n});\n\n// Exportar la conexión para usarla en otros archivos\nmodule.exports = connection; "],"names":[],"mappings":"AAAA,MAAM;;;;;AAEN,+BAA+B;AAC/B,MAAM,aAAa,MAAM,gBAAgB,CAAC;IACtC,MAAM;IACN,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU,YAAY,6BAA6B;AACvD;AAEA,qBAAqB;AACrB,WAAW,OAAO,CAAC,CAAC;IAChB,IAAI,KAAK;QACL,QAAQ,KAAK,CAAC,yCAAyC;QACvD;IACJ;IACA,QAAQ,GAAG,CAAC;AAChB;AAEA,qDAAqD;AACrD,OAAO,OAAO,GAAG"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/libs/auth.js"],"sourcesContent":["import connection from '../database/connection';\n\nexport async function authenticateUser(email, password) {\n    try {\n        // Primero buscamos en la tabla usuarios para administradores\n        const [admins] = await connection.promise().query(\n            'SELECT user_id as id, email, password, \"admin\" as rol FROM usuarios WHERE email = ? AND password = ?',\n            [email, password]\n        );\n\n        // Si no es admin, buscamos en la tabla doctores\n        const [doctors] = await connection.promise().query(\n            'SELECT doctor_id as id, email, password, \"doctor\" as rol FROM doctores WHERE email = ? AND password = ?',\n            [email, password]\n        );\n\n        // Si no es doctor, buscamos en la tabla pacientes\n        const [patients] = await connection.promise().query(\n            'SELECT paciente_id as id, email, password, \"paciente\" as rol FROM pacientes WHERE email = ? AND password = ?',\n            [email, password]\n        );\n\n        // Combinamos los resultados (solo uno debería existir)\n        const user = admins[0] || doctors[0] || patients[0];\n\n        if (!user) {\n            return { error: 'Credenciales incorrectas' };\n        }\n\n        // No enviar la contraseña al cliente\n        const { password: _, ...userWithoutPassword } = user;\n\n        return {\n            user: userWithoutPassword,\n            redirectTo: getRedirectPath(user.rol)\n        };\n    } catch (error) {\n        console.error('Error en la autenticación:', error);\n        return { error: 'Error en la autenticación' };\n    }\n}\n\nfunction getRedirectPath(rol) {\n    switch (rol) {\n        case 'admin':\n            return '/dashboard/admin';\n        case 'doctor':\n            return '/dashboard/doctor';\n        case 'paciente':\n            return '/dashboard/paciente';\n        default:\n            return '/';\n    }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,iBAAiB,KAAK,EAAE,QAAQ;IAClD,IAAI;QACA,6DAA6D;QAC7D,MAAM,CAAC,OAAO,GAAG,MAAM,wHAAA,CAAA,UAAU,CAAC,OAAO,GAAG,KAAK,CAC7C,wGACA;YAAC;YAAO;SAAS;QAGrB,gDAAgD;QAChD,MAAM,CAAC,QAAQ,GAAG,MAAM,wHAAA,CAAA,UAAU,CAAC,OAAO,GAAG,KAAK,CAC9C,2GACA;YAAC;YAAO;SAAS;QAGrB,kDAAkD;QAClD,MAAM,CAAC,SAAS,GAAG,MAAM,wHAAA,CAAA,UAAU,CAAC,OAAO,GAAG,KAAK,CAC/C,gHACA;YAAC;YAAO;SAAS;QAGrB,uDAAuD;QACvD,MAAM,OAAO,MAAM,CAAC,EAAE,IAAI,OAAO,CAAC,EAAE,IAAI,QAAQ,CAAC,EAAE;QAEnD,IAAI,CAAC,MAAM;YACP,OAAO;gBAAE,OAAO;YAA2B;QAC/C;QAEA,qCAAqC;QACrC,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,OAAO;YACH,MAAM;YACN,YAAY,gBAAgB,KAAK,GAAG;QACxC;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YAAE,OAAO;QAA4B;IAChD;AACJ;AAEA,SAAS,gBAAgB,GAAG;IACxB,OAAQ;QACJ,KAAK;YACD,OAAO;QACX,KAAK;YACD,OAAO;QACX,KAAK;YACD,OAAO;QACX;YACI,OAAO;IACf;AACJ"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/auth/login/route.js"],"sourcesContent":["import { authenticateUser } from '@/libs/auth';\nimport { NextResponse } from 'next/server';\n\nexport async function POST(request) {\n    try {\n        const body = await request.json();\n        const { email, password } = body;\n\n        if (!email || !password) {\n            return NextResponse.json(\n                { error: 'Correo y contraseña son requeridos' },\n                { status: 400 }\n            );\n        }\n\n        const result = await authenticateUser(email, password);\n\n        if (result.error) {\n            return NextResponse.json(\n                { error: result.error },\n                { status: 401 }\n            );\n        }\n\n        return NextResponse.json(result);\n    } catch (error) {\n        console.error('Error en el login:', error);\n        return NextResponse.json(\n            { error: 'Error en el servidor' },\n            { status: 500 }\n        );\n    }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAO;IAC9B,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,IAAI,CAAC,SAAS,CAAC,UAAU;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAEtB;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,8GAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO;QAE7C,IAAI,OAAO,KAAK,EAAE;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO,OAAO,KAAK;YAAC,GACtB;gBAAE,QAAQ;YAAI;QAEtB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}