{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/doctores/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mysql from 'mysql2/promise';\n\n// Configuración de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'clinica_db'\n};\n\n// GET /api/doctores/[id] - Obtener un doctor específico\nexport async function GET(\n  request: Request,\n  context: { params: { id: string } }\n) {\n  console.log('[GET /api/doctores/[id]] Iniciando petición...');\n  try {\n    const { id } = await context.params;\n    console.log('[GET /api/doctores/[id]] ID del doctor:', id);\n\n    console.log('[GET /api/doctores/[id]] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[GET /api/doctores/[id]] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[GET /api/doctores/[id]] current_user_id asignado');\n\n    console.log('[GET /api/doctores/[id]] Ejecutando consulta SQL...');\n    const [rows] = await conn.execute(\n      `SELECT u.user_id AS doctor_id, u.primer_nombre, u.segundo_nombre,\n              u.apellido_paterno, u.apellido_materno, u.email, \n              m.especialidad, c.nombre AS consultorio,\n              c.consultorio_id\n       FROM medicos m\n       JOIN usuarios u ON m.doctor_id = u.user_id\n       LEFT JOIN consultorios c ON m.consultorio_id = c.consultorio_id\n       WHERE u.user_id = ?`,\n      [id]\n    );\n    console.log('[GET /api/doctores/[id]] Consulta ejecutada. Resultados:', rows);\n\n    await conn.end();\n    console.log('[GET /api/doctores/[id]] Conexión cerrada');\n\n    if (!rows[0]) {\n      return NextResponse.json(\n        { error: 'Doctor no encontrado' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(rows[0]);\n  } catch (err) {\n    console.error('[GET /api/doctores/[id]] Error:', err);\n    console.error('[GET /api/doctores/[id]] Stack trace:', err.stack);\n    return NextResponse.json(\n      { error: 'Error al obtener el doctor' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/doctores/[id] - Actualizar un doctor\nexport async function PUT(\n  request: Request,\n  context: { params: { id: string } }\n) {\n  console.log('[PUT /api/doctores/[id]] Iniciando petición...');\n  try {\n    const { id: doctor_id } = await context.params;\n    console.log('[PUT /api/doctores/[id]] ID del doctor:', doctor_id);\n\n    const body = await request.json();\n    console.log('[PUT /api/doctores/[id]] Datos recibidos:', body);\n\n    // Procesar campos exactamente como lo hace el formulario\n    const primer_nombre = body.primer_nombre?.trim() || null;\n    const segundo_nombre = body.segundo_nombre || null; // El formulario envía el valor tal cual\n    const apellido_paterno = body.apellido_paterno?.trim() || null;\n    const apellido_materno = body.apellido_materno || null; // El formulario envía el valor tal cual\n    const password = body.password || null; // El formulario envía el valor tal cual\n    const especialidad = body.especialidad?.trim() || null;\n    const consultorio_id = body.consultorio_id || null;\n\n    console.log('[PUT /api/doctores/[id]] Valores procesados:', {\n      primer_nombre,\n      segundo_nombre,\n      apellido_paterno,\n      apellido_materno,\n      password: password ? '[REDACTED]' : null,\n      especialidad,\n      consultorio_id\n    });\n\n    console.log('[PUT /api/doctores/[id]] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[PUT /api/doctores/[id]] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[PUT /api/doctores/[id]] current_user_id asignado');\n\n    // Iniciar transacción\n    console.log('[PUT /api/doctores/[id]] Iniciando transacción...');\n    await conn.beginTransaction();\n\n    try {\n      // Verificar que el doctor existe\n      const [existingDoctor] = await conn.execute(\n        `SELECT u.user_id, m.doctor_id \n         FROM usuarios u \n         JOIN medicos m ON u.user_id = m.doctor_id \n         WHERE u.user_id = ?`,\n        [doctor_id]\n      );\n\n      if (!existingDoctor[0]) {\n        throw new Error('Doctor no encontrado');\n      }\n\n      // Actualizar usuario\n      console.log('[PUT /api/doctores/[id]] Actualizando tabla usuarios...');\n      try {\n        // Construir la consulta SQL dinámicamente basada en si hay contraseña o no\n        let updateUserQuery = `\n          UPDATE usuarios \n          SET primer_nombre = ?, \n              segundo_nombre = ?,\n              apellido_paterno = ?,\n              apellido_materno = ?\n        `;\n        \n        const updateUserParams = [primer_nombre, segundo_nombre, apellido_paterno, apellido_materno];\n\n        // Solo actualizar la contraseña si se proporciona una nueva\n        if (password) {\n          updateUserQuery += `, password = ?`;\n          updateUserParams.push(password);\n        }\n\n        updateUserQuery += ` WHERE user_id = ?`;\n        updateUserParams.push(doctor_id);\n\n        const [userResult] = await conn.execute(updateUserQuery, updateUserParams);\n        console.log('[PUT /api/doctores/[id]] Resultado de actualización de usuario:', userResult);\n      } catch (err) {\n        console.error('[PUT /api/doctores/[id]] Error al actualizar usuario:', err);\n        throw err;\n      }\n      console.log('[PUT /api/doctores/[id]] Usuario actualizado');\n\n      // Actualizar médico\n      console.log('[PUT /api/doctores/[id]] Actualizando tabla medicos...');\n      try {\n        const [medicoResult] = await conn.execute(\n          `UPDATE medicos \n           SET especialidad = ?, \n               consultorio_id = ?\n           WHERE doctor_id = ?`,\n          [especialidad, consultorio_id, doctor_id]\n        );\n        console.log('[PUT /api/doctores/[id]] Resultado de actualización de médico:', medicoResult);\n      } catch (err) {\n        console.error('[PUT /api/doctores/[id]] Error al actualizar médico:', err);\n        throw err;\n      }\n      console.log('[PUT /api/doctores/[id]] Médico actualizado');\n\n      // Confirmar transacción\n      console.log('[PUT /api/doctores/[id]] Confirmando transacción...');\n      await conn.commit();\n      console.log('[PUT /api/doctores/[id]] Transacción confirmada');\n\n      // Obtener los datos actualizados del doctor\n      console.log('[PUT /api/doctores/[id]] Obteniendo datos actualizados...');\n      const [updatedDoctor] = await conn.execute(\n        `SELECT u.user_id AS doctor_id, u.primer_nombre, u.segundo_nombre,\n                u.apellido_paterno, u.apellido_materno, u.email, \n                m.especialidad, c.nombre AS consultorio,\n                c.consultorio_id\n         FROM medicos m\n         JOIN usuarios u ON m.doctor_id = u.user_id\n         LEFT JOIN consultorios c ON m.consultorio_id = c.consultorio_id\n         WHERE u.user_id = ?`,\n        [doctor_id]\n      );\n      console.log('[PUT /api/doctores/[id]] Datos actualizados obtenidos:', updatedDoctor[0]);\n\n      // Cerrar la conexión después de obtener los datos\n      await conn.end();\n      console.log('[PUT /api/doctores/[id]] Conexión cerrada');\n\n      return NextResponse.json(updatedDoctor[0]);\n    } catch (err) {\n      // Revertir transacción en caso de error\n      console.error('[PUT /api/doctores/[id]] Error en la transacción:', err);\n      await conn.rollback();\n      console.log('[PUT /api/doctores/[id]] Transacción revertida');\n      throw err;\n    }\n  } catch (err) {\n    console.error('[PUT /api/doctores/[id]] Error:', err);\n    console.error('[PUT /api/doctores/[id]] Stack trace:', err.stack);\n    return NextResponse.json(\n      { error: 'Error al actualizar el doctor' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/doctores/[id] - Eliminar un doctor\nexport async function DELETE(\n  request: Request,\n  context: { params: { id: string } }\n) {\n  console.log('[DELETE /api/doctores/[id]] Iniciando petición...');\n  try {\n    const doctor_id = context.params.id;\n    console.log('[DELETE /api/doctores/[id]] ID del doctor:', doctor_id);\n\n    console.log('[DELETE /api/doctores/[id]] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[DELETE /api/doctores/[id]] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[DELETE /api/doctores/[id]] current_user_id asignado');\n\n    // Primero eliminamos de la tabla medicos\n    console.log('[DELETE /api/doctores/[id]] Eliminando de tabla medicos...');\n    await conn.execute(\n      'DELETE FROM medicos WHERE doctor_id = ?',\n      [doctor_id]\n    );\n    console.log('[DELETE /api/doctores/[id]] Médico eliminado');\n\n    // Luego eliminamos de la tabla usuarios\n    console.log('[DELETE /api/doctores/[id]] Eliminando de tabla usuarios...');\n    await conn.execute(\n      'DELETE FROM usuarios WHERE user_id = ?',\n      [doctor_id]\n    );\n    console.log('[DELETE /api/doctores/[id]] Usuario eliminado');\n\n    await conn.end();\n    console.log('[DELETE /api/doctores/[id]] Conexión cerrada');\n\n    return NextResponse.json({ message: 'Doctor eliminado con éxito' });\n  } catch (err) {\n    console.error('[DELETE /api/doctores/[id]] Error:', err);\n    console.error('[DELETE /api/doctores/[id]] Stack trace:', err.stack);\n    return NextResponse.json(\n      { error: 'Error al eliminar el doctor' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}