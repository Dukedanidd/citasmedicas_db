{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/senorbuen0/ISC/sem6/bd/proyecto/citasmedicas_db/app/api/alergias/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mysql from 'mysql2/promise';\n\n// Configuración de la base de datos\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'clinica_db'\n};\n\n// GET - Obtener alergias\nexport async function GET(request) {\n  console.log('[GET /api/alergias] Iniciando petición...');\n  try {\n    const { searchParams } = new URL(request.url);\n    const alergiaId = searchParams.get('alergiaId');\n    const expedienteId = searchParams.get('expedienteId');\n\n    console.log('[GET /api/alergias] Parámetros:', { alergiaId, expedienteId });\n\n    if (!alergiaId && !expedienteId) {\n      return NextResponse.json({ error: 'Se requiere ID de alergia o expediente' }, { status: 400 });\n    }\n\n    console.log('[GET /api/alergias] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[GET /api/alergias] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[GET /api/alergias] current_user_id asignado');\n\n    let query = `\n      SELECT a.*, e.paciente_id\n      FROM alergias a\n      JOIN expedientes e ON a.expediente_id = e.expediente_id\n      WHERE 1=1\n    `;\n    const params = [];\n\n    if (alergiaId) {\n      query += ' AND a.alergia_id = ?';\n      params.push(alergiaId);\n    } else if (expedienteId) {\n      query += ' AND a.expediente_id = ?';\n      params.push(expedienteId);\n    }\n\n    query += ' ORDER BY a.alergia_id';\n\n    console.log('[GET /api/alergias] Ejecutando consulta...');\n    const [rows] = await conn.execute(query, params);\n    console.log('[GET /api/alergias] Resultados:', rows);\n\n    await conn.end();\n    console.log('[GET /api/alergias] Conexión cerrada');\n\n    if (alergiaId && !rows[0]) {\n      return NextResponse.json({ error: 'Alergia no encontrada' }, { status: 404 });\n    }\n\n    return NextResponse.json(alergiaId ? rows[0] : rows);\n  } catch (error) {\n    console.error('[GET /api/alergias] Error:', error);\n    console.error('[GET /api/alergias] Stack trace:', error.stack);\n    return NextResponse.json({ error: 'Error al obtener alergias' }, { status: 500 });\n  }\n}\n\n// POST - Crear nueva alergia\nexport async function POST(request) {\n  console.log('[POST /api/alergias] Iniciando petición...');\n  try {\n    const data = await request.json();\n    console.log('[POST /api/alergias] Datos recibidos:', data);\n\n    const { expediente_id, descripcion } = data;\n\n    if (!expediente_id || !descripcion) {\n      return NextResponse.json({ \n        error: 'expediente_id y descripcion son requeridos' \n      }, { status: 400 });\n    }\n\n    console.log('[POST /api/alergias] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[POST /api/alergias] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[POST /api/alergias] current_user_id asignado');\n\n    // Verificar que el expediente existe\n    console.log('[POST /api/alergias] Verificando expediente...');\n    const [expediente] = await conn.execute(\n      'SELECT expediente_id FROM expedientes WHERE expediente_id = ?',\n      [expediente_id]\n    );\n\n    if (!expediente[0]) {\n      await conn.end();\n      return NextResponse.json({ error: 'Expediente no encontrado' }, { status: 404 });\n    }\n\n    // Insertar la nueva alergia\n    console.log('[POST /api/alergias] Creando alergia...');\n    const [result] = await conn.execute(`\n      INSERT INTO alergias (expediente_id, descripcion)\n      VALUES (?, ?)\n    `, [expediente_id, descripcion]);\n\n    await conn.end();\n    console.log('[POST /api/alergias] Alergia creada exitosamente');\n\n    return NextResponse.json({ \n      message: 'Alergia creada exitosamente',\n      alergia_id: result.insertId \n    }, { status: 201 });\n  } catch (error) {\n    console.error('[POST /api/alergias] Error:', error);\n    console.error('[POST /api/alergias] Stack trace:', error.stack);\n    return NextResponse.json({ error: 'Error al crear alergia' }, { status: 500 });\n  }\n}\n\n// PUT - Actualizar alergia\nexport async function PUT(request) {\n  console.log('[PUT /api/alergias] Iniciando petición...');\n  try {\n    const data = await request.json();\n    console.log('[PUT /api/alergias] Datos recibidos:', data);\n\n    const { alergia_id, descripcion } = data;\n\n    if (!alergia_id) {\n      return NextResponse.json({ error: 'alergia_id es requerido' }, { status: 400 });\n    }\n\n    console.log('[PUT /api/alergias] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[PUT /api/alergias] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[PUT /api/alergias] current_user_id asignado');\n\n    // Verificar que la alergia existe\n    console.log('[PUT /api/alergias] Verificando existencia de la alergia...');\n    const [alergia] = await conn.execute(\n      'SELECT alergia_id FROM alergias WHERE alergia_id = ?',\n      [alergia_id]\n    );\n\n    if (!alergia[0]) {\n      await conn.end();\n      return NextResponse.json({ error: 'Alergia no encontrada' }, { status: 404 });\n    }\n\n    // Actualizar la alergia\n    console.log('[PUT /api/alergias] Actualizando alergia...');\n    await conn.execute(`\n      UPDATE alergias\n      SET descripcion = ?\n      WHERE alergia_id = ?\n    `, [descripcion, alergia_id]);\n\n    await conn.end();\n    console.log('[PUT /api/alergias] Alergia actualizada exitosamente');\n\n    return NextResponse.json({ message: 'Alergia actualizada exitosamente' });\n  } catch (error) {\n    console.error('[PUT /api/alergias] Error:', error);\n    console.error('[PUT /api/alergias] Stack trace:', error.stack);\n    return NextResponse.json({ error: 'Error al actualizar alergia' }, { status: 500 });\n  }\n}\n\n// DELETE - Eliminar alergia\nexport async function DELETE(request) {\n  console.log('[DELETE /api/alergias] Iniciando petición...');\n  try {\n    const { searchParams } = new URL(request.url);\n    const alergiaId = searchParams.get('alergiaId');\n\n    if (!alergiaId) {\n      return NextResponse.json({ error: 'ID de alergia requerido' }, { status: 400 });\n    }\n\n    console.log('[DELETE /api/alergias] Conectando a la base de datos...');\n    const conn = await mysql.createConnection(dbConfig);\n    console.log('[DELETE /api/alergias] Conexión exitosa');\n\n    // Asignar current_user_id para los triggers\n    await conn.execute('SET @current_user_id = 1');\n    console.log('[DELETE /api/alergias] current_user_id asignado');\n\n    // Verificar que la alergia existe\n    console.log('[DELETE /api/alergias] Verificando existencia de la alergia...');\n    const [alergia] = await conn.execute(\n      'SELECT alergia_id FROM alergias WHERE alergia_id = ?',\n      [alergiaId]\n    );\n\n    if (!alergia[0]) {\n      await conn.end();\n      return NextResponse.json({ error: 'Alergia no encontrada' }, { status: 404 });\n    }\n\n    // Eliminar la alergia\n    console.log('[DELETE /api/alergias] Eliminando alergia...');\n    await conn.execute('DELETE FROM alergias WHERE alergia_id = ?', [alergiaId]);\n\n    await conn.end();\n    console.log('[DELETE /api/alergias] Alergia eliminada exitosamente');\n\n    return NextResponse.json({ message: 'Alergia eliminada exitosamente' });\n  } catch (error) {\n    console.error('[DELETE /api/alergias] Error:', error);\n    console.error('[DELETE /api/alergias] Stack trace:', error.stack);\n    return NextResponse.json({ error: 'Error al eliminar alergia' }, { status: 500 });\n  }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}