{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { sql } from '@vercel/postgres'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from './app/api/auth/[...nextauth]/route'\n\nexport async function middleware(request: NextRequest) {\n  // Solo interceptar peticiones a la API\n  if (request.nextUrl.pathname.startsWith('/api')) {\n    try {\n      // Obtener la sesión del servidor\n      const session = await getServerSession(authOptions)\n      \n      if (session?.user?.id) {\n        // Configurar el current_user_id en la base de datos\n        await sql`SET @current_user_id = ${session.user.id}`\n      }\n    } catch (error) {\n      console.error('Error setting current_user_id:', error)\n    }\n  }\n\n  return NextResponse.next()\n}\n\n// Configurar en qué rutas se ejecutará el middleware\nexport const config = {\n  matcher: '/api/:path*',\n} "],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;AAAA;;;;;AAMO,eAAe,WAAW,OAAoB;IACnD,uCAAuC;IACvC,IAAI,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS;QAC/C,IAAI;YACF,iCAAiC;YACjC,MAAM,UAAU,MAAM,iBAAiB;YAEvC,IAAI,SAAS,MAAM,IAAI;gBACrB,oDAAoD;gBACpD,MAAM,GAAG,CAAC,uBAAuB,EAAE,QAAQ,IAAI,CAAC,EAAE,CAAC,CAAC;YACtD;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kCAAkC;QAClD;IACF;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;AACX"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}